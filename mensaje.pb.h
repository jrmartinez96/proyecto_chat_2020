// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mensaje.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mensaje_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mensaje_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mensaje_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mensaje_2eproto;
namespace chat {
class BroadcastRequest;
class BroadcastRequestDefaultTypeInternal;
extern BroadcastRequestDefaultTypeInternal _BroadcastRequest_default_instance_;
class BroadcastResponse;
class BroadcastResponseDefaultTypeInternal;
extern BroadcastResponseDefaultTypeInternal _BroadcastResponse_default_instance_;
class CambioEstadoRequest;
class CambioEstadoRequestDefaultTypeInternal;
extern CambioEstadoRequestDefaultTypeInternal _CambioEstadoRequest_default_instance_;
class ErrorResponse;
class ErrorResponseDefaultTypeInternal;
extern ErrorResponseDefaultTypeInternal _ErrorResponse_default_instance_;
class Mensaje;
class MensajeDefaultTypeInternal;
extern MensajeDefaultTypeInternal _Mensaje_default_instance_;
class MensajePrivadoRequest;
class MensajePrivadoRequestDefaultTypeInternal;
extern MensajePrivadoRequestDefaultTypeInternal _MensajePrivadoRequest_default_instance_;
class MensajePrivadoResponse;
class MensajePrivadoResponseDefaultTypeInternal;
extern MensajePrivadoResponseDefaultTypeInternal _MensajePrivadoResponse_default_instance_;
class MiInfoRequest;
class MiInfoRequestDefaultTypeInternal;
extern MiInfoRequestDefaultTypeInternal _MiInfoRequest_default_instance_;
class SolicitarInfoUsuarioRequest;
class SolicitarInfoUsuarioRequestDefaultTypeInternal;
extern SolicitarInfoUsuarioRequestDefaultTypeInternal _SolicitarInfoUsuarioRequest_default_instance_;
class SolicitarInfoUsuarioResponse;
class SolicitarInfoUsuarioResponseDefaultTypeInternal;
extern SolicitarInfoUsuarioResponseDefaultTypeInternal _SolicitarInfoUsuarioResponse_default_instance_;
class UsuarioConectado;
class UsuarioConectadoDefaultTypeInternal;
extern UsuarioConectadoDefaultTypeInternal _UsuarioConectado_default_instance_;
class UsuariosConectadosResponse;
class UsuariosConectadosResponseDefaultTypeInternal;
extern UsuariosConectadosResponseDefaultTypeInternal _UsuariosConectadosResponse_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::BroadcastRequest* Arena::CreateMaybeMessage<::chat::BroadcastRequest>(Arena*);
template<> ::chat::BroadcastResponse* Arena::CreateMaybeMessage<::chat::BroadcastResponse>(Arena*);
template<> ::chat::CambioEstadoRequest* Arena::CreateMaybeMessage<::chat::CambioEstadoRequest>(Arena*);
template<> ::chat::ErrorResponse* Arena::CreateMaybeMessage<::chat::ErrorResponse>(Arena*);
template<> ::chat::Mensaje* Arena::CreateMaybeMessage<::chat::Mensaje>(Arena*);
template<> ::chat::MensajePrivadoRequest* Arena::CreateMaybeMessage<::chat::MensajePrivadoRequest>(Arena*);
template<> ::chat::MensajePrivadoResponse* Arena::CreateMaybeMessage<::chat::MensajePrivadoResponse>(Arena*);
template<> ::chat::MiInfoRequest* Arena::CreateMaybeMessage<::chat::MiInfoRequest>(Arena*);
template<> ::chat::SolicitarInfoUsuarioRequest* Arena::CreateMaybeMessage<::chat::SolicitarInfoUsuarioRequest>(Arena*);
template<> ::chat::SolicitarInfoUsuarioResponse* Arena::CreateMaybeMessage<::chat::SolicitarInfoUsuarioResponse>(Arena*);
template<> ::chat::UsuarioConectado* Arena::CreateMaybeMessage<::chat::UsuarioConectado>(Arena*);
template<> ::chat::UsuariosConectadosResponse* Arena::CreateMaybeMessage<::chat::UsuariosConectadosResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

// ===================================================================

class MiInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.MiInfoRequest) */ {
 public:
  MiInfoRequest();
  virtual ~MiInfoRequest();

  MiInfoRequest(const MiInfoRequest& from);
  MiInfoRequest(MiInfoRequest&& from) noexcept
    : MiInfoRequest() {
    *this = ::std::move(from);
  }

  inline MiInfoRequest& operator=(const MiInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiInfoRequest& operator=(MiInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MiInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MiInfoRequest* internal_default_instance() {
    return reinterpret_cast<const MiInfoRequest*>(
               &_MiInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MiInfoRequest& a, MiInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MiInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MiInfoRequest* New() const final {
    return CreateMaybeMessage<MiInfoRequest>(nullptr);
  }

  MiInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MiInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MiInfoRequest& from);
  void MergeFrom(const MiInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MiInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.MiInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // required string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required string ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:chat.MiInfoRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class BroadcastRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.BroadcastRequest) */ {
 public:
  BroadcastRequest();
  virtual ~BroadcastRequest();

  BroadcastRequest(const BroadcastRequest& from);
  BroadcastRequest(BroadcastRequest&& from) noexcept
    : BroadcastRequest() {
    *this = ::std::move(from);
  }

  inline BroadcastRequest& operator=(const BroadcastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastRequest& operator=(BroadcastRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastRequest* internal_default_instance() {
    return reinterpret_cast<const BroadcastRequest*>(
               &_BroadcastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BroadcastRequest& a, BroadcastRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastRequest* New() const final {
    return CreateMaybeMessage<BroadcastRequest>(nullptr);
  }

  BroadcastRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastRequest& from);
  void MergeFrom(const BroadcastRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.BroadcastRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:chat.BroadcastRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class BroadcastResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.BroadcastResponse) */ {
 public:
  BroadcastResponse();
  virtual ~BroadcastResponse();

  BroadcastResponse(const BroadcastResponse& from);
  BroadcastResponse(BroadcastResponse&& from) noexcept
    : BroadcastResponse() {
    *this = ::std::move(from);
  }

  inline BroadcastResponse& operator=(const BroadcastResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastResponse& operator=(BroadcastResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastResponse* internal_default_instance() {
    return reinterpret_cast<const BroadcastResponse*>(
               &_BroadcastResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BroadcastResponse& a, BroadcastResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastResponse* New() const final {
    return CreateMaybeMessage<BroadcastResponse>(nullptr);
  }

  BroadcastResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastResponse& from);
  void MergeFrom(const BroadcastResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.BroadcastResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kFromUsernameFieldNumber = 2,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required string fromUsername = 2;
  bool has_fromusername() const;
  private:
  bool _internal_has_fromusername() const;
  public:
  void clear_fromusername();
  const std::string& fromusername() const;
  void set_fromusername(const std::string& value);
  void set_fromusername(std::string&& value);
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  std::string* mutable_fromusername();
  std::string* release_fromusername();
  void set_allocated_fromusername(std::string* fromusername);
  private:
  const std::string& _internal_fromusername() const;
  void _internal_set_fromusername(const std::string& value);
  std::string* _internal_mutable_fromusername();
  public:

  // @@protoc_insertion_point(class_scope:chat.BroadcastResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromusername_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class CambioEstadoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.CambioEstadoRequest) */ {
 public:
  CambioEstadoRequest();
  virtual ~CambioEstadoRequest();

  CambioEstadoRequest(const CambioEstadoRequest& from);
  CambioEstadoRequest(CambioEstadoRequest&& from) noexcept
    : CambioEstadoRequest() {
    *this = ::std::move(from);
  }

  inline CambioEstadoRequest& operator=(const CambioEstadoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CambioEstadoRequest& operator=(CambioEstadoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CambioEstadoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CambioEstadoRequest* internal_default_instance() {
    return reinterpret_cast<const CambioEstadoRequest*>(
               &_CambioEstadoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CambioEstadoRequest& a, CambioEstadoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CambioEstadoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CambioEstadoRequest* New() const final {
    return CreateMaybeMessage<CambioEstadoRequest>(nullptr);
  }

  CambioEstadoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CambioEstadoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CambioEstadoRequest& from);
  void MergeFrom(const CambioEstadoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CambioEstadoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.CambioEstadoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNuevoEstadoFieldNumber = 1,
  };
  // required string nuevoEstado = 1;
  bool has_nuevoestado() const;
  private:
  bool _internal_has_nuevoestado() const;
  public:
  void clear_nuevoestado();
  const std::string& nuevoestado() const;
  void set_nuevoestado(const std::string& value);
  void set_nuevoestado(std::string&& value);
  void set_nuevoestado(const char* value);
  void set_nuevoestado(const char* value, size_t size);
  std::string* mutable_nuevoestado();
  std::string* release_nuevoestado();
  void set_allocated_nuevoestado(std::string* nuevoestado);
  private:
  const std::string& _internal_nuevoestado() const;
  void _internal_set_nuevoestado(const std::string& value);
  std::string* _internal_mutable_nuevoestado();
  public:

  // @@protoc_insertion_point(class_scope:chat.CambioEstadoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nuevoestado_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class UsuarioConectado :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UsuarioConectado) */ {
 public:
  UsuarioConectado();
  virtual ~UsuarioConectado();

  UsuarioConectado(const UsuarioConectado& from);
  UsuarioConectado(UsuarioConectado&& from) noexcept
    : UsuarioConectado() {
    *this = ::std::move(from);
  }

  inline UsuarioConectado& operator=(const UsuarioConectado& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsuarioConectado& operator=(UsuarioConectado&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsuarioConectado& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsuarioConectado* internal_default_instance() {
    return reinterpret_cast<const UsuarioConectado*>(
               &_UsuarioConectado_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UsuarioConectado& a, UsuarioConectado& b) {
    a.Swap(&b);
  }
  inline void Swap(UsuarioConectado* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsuarioConectado* New() const final {
    return CreateMaybeMessage<UsuarioConectado>(nullptr);
  }

  UsuarioConectado* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsuarioConectado>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsuarioConectado& from);
  void MergeFrom(const UsuarioConectado& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsuarioConectado* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UsuarioConectado";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kEstadoFieldNumber = 2,
    kIdFieldNumber = 3,
    kIpFieldNumber = 4,
  };
  // required string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required string estado = 2;
  bool has_estado() const;
  private:
  bool _internal_has_estado() const;
  public:
  void clear_estado();
  const std::string& estado() const;
  void set_estado(const std::string& value);
  void set_estado(std::string&& value);
  void set_estado(const char* value);
  void set_estado(const char* value, size_t size);
  std::string* mutable_estado();
  std::string* release_estado();
  void set_allocated_estado(std::string* estado);
  private:
  const std::string& _internal_estado() const;
  void _internal_set_estado(const std::string& value);
  std::string* _internal_mutable_estado();
  public:

  // required string id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string ip = 4;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:chat.UsuarioConectado)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr estado_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class UsuariosConectadosResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UsuariosConectadosResponse) */ {
 public:
  UsuariosConectadosResponse();
  virtual ~UsuariosConectadosResponse();

  UsuariosConectadosResponse(const UsuariosConectadosResponse& from);
  UsuariosConectadosResponse(UsuariosConectadosResponse&& from) noexcept
    : UsuariosConectadosResponse() {
    *this = ::std::move(from);
  }

  inline UsuariosConectadosResponse& operator=(const UsuariosConectadosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsuariosConectadosResponse& operator=(UsuariosConectadosResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsuariosConectadosResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsuariosConectadosResponse* internal_default_instance() {
    return reinterpret_cast<const UsuariosConectadosResponse*>(
               &_UsuariosConectadosResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UsuariosConectadosResponse& a, UsuariosConectadosResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UsuariosConectadosResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsuariosConectadosResponse* New() const final {
    return CreateMaybeMessage<UsuariosConectadosResponse>(nullptr);
  }

  UsuariosConectadosResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsuariosConectadosResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsuariosConectadosResponse& from);
  void MergeFrom(const UsuariosConectadosResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsuariosConectadosResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UsuariosConectadosResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsuariosConectadosFieldNumber = 1,
  };
  // repeated .chat.UsuarioConectado usuariosConectados = 1;
  int usuariosconectados_size() const;
  private:
  int _internal_usuariosconectados_size() const;
  public:
  void clear_usuariosconectados();
  ::chat::UsuarioConectado* mutable_usuariosconectados(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UsuarioConectado >*
      mutable_usuariosconectados();
  private:
  const ::chat::UsuarioConectado& _internal_usuariosconectados(int index) const;
  ::chat::UsuarioConectado* _internal_add_usuariosconectados();
  public:
  const ::chat::UsuarioConectado& usuariosconectados(int index) const;
  ::chat::UsuarioConectado* add_usuariosconectados();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UsuarioConectado >&
      usuariosconectados() const;

  // @@protoc_insertion_point(class_scope:chat.UsuariosConectadosResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UsuarioConectado > usuariosconectados_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class SolicitarInfoUsuarioRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.SolicitarInfoUsuarioRequest) */ {
 public:
  SolicitarInfoUsuarioRequest();
  virtual ~SolicitarInfoUsuarioRequest();

  SolicitarInfoUsuarioRequest(const SolicitarInfoUsuarioRequest& from);
  SolicitarInfoUsuarioRequest(SolicitarInfoUsuarioRequest&& from) noexcept
    : SolicitarInfoUsuarioRequest() {
    *this = ::std::move(from);
  }

  inline SolicitarInfoUsuarioRequest& operator=(const SolicitarInfoUsuarioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolicitarInfoUsuarioRequest& operator=(SolicitarInfoUsuarioRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SolicitarInfoUsuarioRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolicitarInfoUsuarioRequest* internal_default_instance() {
    return reinterpret_cast<const SolicitarInfoUsuarioRequest*>(
               &_SolicitarInfoUsuarioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SolicitarInfoUsuarioRequest& a, SolicitarInfoUsuarioRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SolicitarInfoUsuarioRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SolicitarInfoUsuarioRequest* New() const final {
    return CreateMaybeMessage<SolicitarInfoUsuarioRequest>(nullptr);
  }

  SolicitarInfoUsuarioRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SolicitarInfoUsuarioRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SolicitarInfoUsuarioRequest& from);
  void MergeFrom(const SolicitarInfoUsuarioRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolicitarInfoUsuarioRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.SolicitarInfoUsuarioRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // required string userId = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // @@protoc_insertion_point(class_scope:chat.SolicitarInfoUsuarioRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class SolicitarInfoUsuarioResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.SolicitarInfoUsuarioResponse) */ {
 public:
  SolicitarInfoUsuarioResponse();
  virtual ~SolicitarInfoUsuarioResponse();

  SolicitarInfoUsuarioResponse(const SolicitarInfoUsuarioResponse& from);
  SolicitarInfoUsuarioResponse(SolicitarInfoUsuarioResponse&& from) noexcept
    : SolicitarInfoUsuarioResponse() {
    *this = ::std::move(from);
  }

  inline SolicitarInfoUsuarioResponse& operator=(const SolicitarInfoUsuarioResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolicitarInfoUsuarioResponse& operator=(SolicitarInfoUsuarioResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SolicitarInfoUsuarioResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolicitarInfoUsuarioResponse* internal_default_instance() {
    return reinterpret_cast<const SolicitarInfoUsuarioResponse*>(
               &_SolicitarInfoUsuarioResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SolicitarInfoUsuarioResponse& a, SolicitarInfoUsuarioResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SolicitarInfoUsuarioResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SolicitarInfoUsuarioResponse* New() const final {
    return CreateMaybeMessage<SolicitarInfoUsuarioResponse>(nullptr);
  }

  SolicitarInfoUsuarioResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SolicitarInfoUsuarioResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SolicitarInfoUsuarioResponse& from);
  void MergeFrom(const SolicitarInfoUsuarioResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolicitarInfoUsuarioResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.SolicitarInfoUsuarioResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsuarioConectadoFieldNumber = 1,
  };
  // required .chat.UsuarioConectado usuarioConectado = 1;
  bool has_usuarioconectado() const;
  private:
  bool _internal_has_usuarioconectado() const;
  public:
  void clear_usuarioconectado();
  const ::chat::UsuarioConectado& usuarioconectado() const;
  ::chat::UsuarioConectado* release_usuarioconectado();
  ::chat::UsuarioConectado* mutable_usuarioconectado();
  void set_allocated_usuarioconectado(::chat::UsuarioConectado* usuarioconectado);
  private:
  const ::chat::UsuarioConectado& _internal_usuarioconectado() const;
  ::chat::UsuarioConectado* _internal_mutable_usuarioconectado();
  public:

  // @@protoc_insertion_point(class_scope:chat.SolicitarInfoUsuarioResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::chat::UsuarioConectado* usuarioconectado_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class MensajePrivadoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.MensajePrivadoRequest) */ {
 public:
  MensajePrivadoRequest();
  virtual ~MensajePrivadoRequest();

  MensajePrivadoRequest(const MensajePrivadoRequest& from);
  MensajePrivadoRequest(MensajePrivadoRequest&& from) noexcept
    : MensajePrivadoRequest() {
    *this = ::std::move(from);
  }

  inline MensajePrivadoRequest& operator=(const MensajePrivadoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MensajePrivadoRequest& operator=(MensajePrivadoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MensajePrivadoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MensajePrivadoRequest* internal_default_instance() {
    return reinterpret_cast<const MensajePrivadoRequest*>(
               &_MensajePrivadoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MensajePrivadoRequest& a, MensajePrivadoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MensajePrivadoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MensajePrivadoRequest* New() const final {
    return CreateMaybeMessage<MensajePrivadoRequest>(nullptr);
  }

  MensajePrivadoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MensajePrivadoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MensajePrivadoRequest& from);
  void MergeFrom(const MensajePrivadoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MensajePrivadoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.MensajePrivadoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kToUserIpFieldNumber = 2,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required string toUserIp = 2;
  bool has_touserip() const;
  private:
  bool _internal_has_touserip() const;
  public:
  void clear_touserip();
  const std::string& touserip() const;
  void set_touserip(const std::string& value);
  void set_touserip(std::string&& value);
  void set_touserip(const char* value);
  void set_touserip(const char* value, size_t size);
  std::string* mutable_touserip();
  std::string* release_touserip();
  void set_allocated_touserip(std::string* touserip);
  private:
  const std::string& _internal_touserip() const;
  void _internal_set_touserip(const std::string& value);
  std::string* _internal_mutable_touserip();
  public:

  // @@protoc_insertion_point(class_scope:chat.MensajePrivadoRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr touserip_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class MensajePrivadoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.MensajePrivadoResponse) */ {
 public:
  MensajePrivadoResponse();
  virtual ~MensajePrivadoResponse();

  MensajePrivadoResponse(const MensajePrivadoResponse& from);
  MensajePrivadoResponse(MensajePrivadoResponse&& from) noexcept
    : MensajePrivadoResponse() {
    *this = ::std::move(from);
  }

  inline MensajePrivadoResponse& operator=(const MensajePrivadoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MensajePrivadoResponse& operator=(MensajePrivadoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MensajePrivadoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MensajePrivadoResponse* internal_default_instance() {
    return reinterpret_cast<const MensajePrivadoResponse*>(
               &_MensajePrivadoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MensajePrivadoResponse& a, MensajePrivadoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MensajePrivadoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MensajePrivadoResponse* New() const final {
    return CreateMaybeMessage<MensajePrivadoResponse>(nullptr);
  }

  MensajePrivadoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MensajePrivadoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MensajePrivadoResponse& from);
  void MergeFrom(const MensajePrivadoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MensajePrivadoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.MensajePrivadoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kFromUsernameFieldNumber = 2,
    kFromUserIpFieldNumber = 3,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required string fromUsername = 2;
  bool has_fromusername() const;
  private:
  bool _internal_has_fromusername() const;
  public:
  void clear_fromusername();
  const std::string& fromusername() const;
  void set_fromusername(const std::string& value);
  void set_fromusername(std::string&& value);
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  std::string* mutable_fromusername();
  std::string* release_fromusername();
  void set_allocated_fromusername(std::string* fromusername);
  private:
  const std::string& _internal_fromusername() const;
  void _internal_set_fromusername(const std::string& value);
  std::string* _internal_mutable_fromusername();
  public:

  // required string fromUserIp = 3;
  bool has_fromuserip() const;
  private:
  bool _internal_has_fromuserip() const;
  public:
  void clear_fromuserip();
  const std::string& fromuserip() const;
  void set_fromuserip(const std::string& value);
  void set_fromuserip(std::string&& value);
  void set_fromuserip(const char* value);
  void set_fromuserip(const char* value, size_t size);
  std::string* mutable_fromuserip();
  std::string* release_fromuserip();
  void set_allocated_fromuserip(std::string* fromuserip);
  private:
  const std::string& _internal_fromuserip() const;
  void _internal_set_fromuserip(const std::string& value);
  std::string* _internal_mutable_fromuserip();
  public:

  // @@protoc_insertion_point(class_scope:chat.MensajePrivadoResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromusername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromuserip_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class ErrorResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ErrorResponse) */ {
 public:
  ErrorResponse();
  virtual ~ErrorResponse();

  ErrorResponse(const ErrorResponse& from);
  ErrorResponse(ErrorResponse&& from) noexcept
    : ErrorResponse() {
    *this = ::std::move(from);
  }

  inline ErrorResponse& operator=(const ErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorResponse& operator=(ErrorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorResponse* internal_default_instance() {
    return reinterpret_cast<const ErrorResponse*>(
               &_ErrorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ErrorResponse& a, ErrorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorResponse* New() const final {
    return CreateMaybeMessage<ErrorResponse>(nullptr);
  }

  ErrorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorResponse& from);
  void MergeFrom(const ErrorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ErrorResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:chat.ErrorResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class Mensaje :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.Mensaje) */ {
 public:
  Mensaje();
  virtual ~Mensaje();

  Mensaje(const Mensaje& from);
  Mensaje(Mensaje&& from) noexcept
    : Mensaje() {
    *this = ::std::move(from);
  }

  inline Mensaje& operator=(const Mensaje& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mensaje& operator=(Mensaje&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mensaje& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mensaje* internal_default_instance() {
    return reinterpret_cast<const Mensaje*>(
               &_Mensaje_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Mensaje& a, Mensaje& b) {
    a.Swap(&b);
  }
  inline void Swap(Mensaje* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mensaje* New() const final {
    return CreateMaybeMessage<Mensaje>(nullptr);
  }

  Mensaje* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mensaje>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mensaje& from);
  void MergeFrom(const Mensaje& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mensaje* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.Mensaje";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionFieldNumber = 1,
    kMiInfoReqFieldNumber = 2,
    kBroadcastRequestFieldNumber = 3,
    kBroadcastResponseFieldNumber = 4,
    kCambioEstadoRequestFieldNumber = 5,
    kUsuariosConectadosResponseFieldNumber = 6,
    kSolicitarInfoUsuarioRequestFieldNumber = 7,
    kSolicitarInfoUsuarioResponseFieldNumber = 8,
    kMensajePrivadoRequestFieldNumber = 9,
    kMensajePrivadoResponseFieldNumber = 10,
    kErrorResponseFieldNumber = 11,
  };
  // required string option = 1;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  const std::string& option() const;
  void set_option(const std::string& value);
  void set_option(std::string&& value);
  void set_option(const char* value);
  void set_option(const char* value, size_t size);
  std::string* mutable_option();
  std::string* release_option();
  void set_allocated_option(std::string* option);
  private:
  const std::string& _internal_option() const;
  void _internal_set_option(const std::string& value);
  std::string* _internal_mutable_option();
  public:

  // optional .chat.MiInfoRequest miInfoReq = 2;
  bool has_miinforeq() const;
  private:
  bool _internal_has_miinforeq() const;
  public:
  void clear_miinforeq();
  const ::chat::MiInfoRequest& miinforeq() const;
  ::chat::MiInfoRequest* release_miinforeq();
  ::chat::MiInfoRequest* mutable_miinforeq();
  void set_allocated_miinforeq(::chat::MiInfoRequest* miinforeq);
  private:
  const ::chat::MiInfoRequest& _internal_miinforeq() const;
  ::chat::MiInfoRequest* _internal_mutable_miinforeq();
  public:

  // optional .chat.BroadcastRequest broadcastRequest = 3;
  bool has_broadcastrequest() const;
  private:
  bool _internal_has_broadcastrequest() const;
  public:
  void clear_broadcastrequest();
  const ::chat::BroadcastRequest& broadcastrequest() const;
  ::chat::BroadcastRequest* release_broadcastrequest();
  ::chat::BroadcastRequest* mutable_broadcastrequest();
  void set_allocated_broadcastrequest(::chat::BroadcastRequest* broadcastrequest);
  private:
  const ::chat::BroadcastRequest& _internal_broadcastrequest() const;
  ::chat::BroadcastRequest* _internal_mutable_broadcastrequest();
  public:

  // optional .chat.BroadcastResponse broadcastResponse = 4;
  bool has_broadcastresponse() const;
  private:
  bool _internal_has_broadcastresponse() const;
  public:
  void clear_broadcastresponse();
  const ::chat::BroadcastResponse& broadcastresponse() const;
  ::chat::BroadcastResponse* release_broadcastresponse();
  ::chat::BroadcastResponse* mutable_broadcastresponse();
  void set_allocated_broadcastresponse(::chat::BroadcastResponse* broadcastresponse);
  private:
  const ::chat::BroadcastResponse& _internal_broadcastresponse() const;
  ::chat::BroadcastResponse* _internal_mutable_broadcastresponse();
  public:

  // optional .chat.CambioEstadoRequest cambioEstadoRequest = 5;
  bool has_cambioestadorequest() const;
  private:
  bool _internal_has_cambioestadorequest() const;
  public:
  void clear_cambioestadorequest();
  const ::chat::CambioEstadoRequest& cambioestadorequest() const;
  ::chat::CambioEstadoRequest* release_cambioestadorequest();
  ::chat::CambioEstadoRequest* mutable_cambioestadorequest();
  void set_allocated_cambioestadorequest(::chat::CambioEstadoRequest* cambioestadorequest);
  private:
  const ::chat::CambioEstadoRequest& _internal_cambioestadorequest() const;
  ::chat::CambioEstadoRequest* _internal_mutable_cambioestadorequest();
  public:

  // optional .chat.UsuariosConectadosResponse usuariosConectadosResponse = 6;
  bool has_usuariosconectadosresponse() const;
  private:
  bool _internal_has_usuariosconectadosresponse() const;
  public:
  void clear_usuariosconectadosresponse();
  const ::chat::UsuariosConectadosResponse& usuariosconectadosresponse() const;
  ::chat::UsuariosConectadosResponse* release_usuariosconectadosresponse();
  ::chat::UsuariosConectadosResponse* mutable_usuariosconectadosresponse();
  void set_allocated_usuariosconectadosresponse(::chat::UsuariosConectadosResponse* usuariosconectadosresponse);
  private:
  const ::chat::UsuariosConectadosResponse& _internal_usuariosconectadosresponse() const;
  ::chat::UsuariosConectadosResponse* _internal_mutable_usuariosconectadosresponse();
  public:

  // optional .chat.SolicitarInfoUsuarioRequest solicitarInfoUsuarioRequest = 7;
  bool has_solicitarinfousuariorequest() const;
  private:
  bool _internal_has_solicitarinfousuariorequest() const;
  public:
  void clear_solicitarinfousuariorequest();
  const ::chat::SolicitarInfoUsuarioRequest& solicitarinfousuariorequest() const;
  ::chat::SolicitarInfoUsuarioRequest* release_solicitarinfousuariorequest();
  ::chat::SolicitarInfoUsuarioRequest* mutable_solicitarinfousuariorequest();
  void set_allocated_solicitarinfousuariorequest(::chat::SolicitarInfoUsuarioRequest* solicitarinfousuariorequest);
  private:
  const ::chat::SolicitarInfoUsuarioRequest& _internal_solicitarinfousuariorequest() const;
  ::chat::SolicitarInfoUsuarioRequest* _internal_mutable_solicitarinfousuariorequest();
  public:

  // optional .chat.SolicitarInfoUsuarioResponse solicitarInfoUsuarioResponse = 8;
  bool has_solicitarinfousuarioresponse() const;
  private:
  bool _internal_has_solicitarinfousuarioresponse() const;
  public:
  void clear_solicitarinfousuarioresponse();
  const ::chat::SolicitarInfoUsuarioResponse& solicitarinfousuarioresponse() const;
  ::chat::SolicitarInfoUsuarioResponse* release_solicitarinfousuarioresponse();
  ::chat::SolicitarInfoUsuarioResponse* mutable_solicitarinfousuarioresponse();
  void set_allocated_solicitarinfousuarioresponse(::chat::SolicitarInfoUsuarioResponse* solicitarinfousuarioresponse);
  private:
  const ::chat::SolicitarInfoUsuarioResponse& _internal_solicitarinfousuarioresponse() const;
  ::chat::SolicitarInfoUsuarioResponse* _internal_mutable_solicitarinfousuarioresponse();
  public:

  // optional .chat.MensajePrivadoRequest mensajePrivadoRequest = 9;
  bool has_mensajeprivadorequest() const;
  private:
  bool _internal_has_mensajeprivadorequest() const;
  public:
  void clear_mensajeprivadorequest();
  const ::chat::MensajePrivadoRequest& mensajeprivadorequest() const;
  ::chat::MensajePrivadoRequest* release_mensajeprivadorequest();
  ::chat::MensajePrivadoRequest* mutable_mensajeprivadorequest();
  void set_allocated_mensajeprivadorequest(::chat::MensajePrivadoRequest* mensajeprivadorequest);
  private:
  const ::chat::MensajePrivadoRequest& _internal_mensajeprivadorequest() const;
  ::chat::MensajePrivadoRequest* _internal_mutable_mensajeprivadorequest();
  public:

  // optional .chat.MensajePrivadoResponse mensajePrivadoResponse = 10;
  bool has_mensajeprivadoresponse() const;
  private:
  bool _internal_has_mensajeprivadoresponse() const;
  public:
  void clear_mensajeprivadoresponse();
  const ::chat::MensajePrivadoResponse& mensajeprivadoresponse() const;
  ::chat::MensajePrivadoResponse* release_mensajeprivadoresponse();
  ::chat::MensajePrivadoResponse* mutable_mensajeprivadoresponse();
  void set_allocated_mensajeprivadoresponse(::chat::MensajePrivadoResponse* mensajeprivadoresponse);
  private:
  const ::chat::MensajePrivadoResponse& _internal_mensajeprivadoresponse() const;
  ::chat::MensajePrivadoResponse* _internal_mutable_mensajeprivadoresponse();
  public:

  // optional .chat.ErrorResponse errorResponse = 11;
  bool has_errorresponse() const;
  private:
  bool _internal_has_errorresponse() const;
  public:
  void clear_errorresponse();
  const ::chat::ErrorResponse& errorresponse() const;
  ::chat::ErrorResponse* release_errorresponse();
  ::chat::ErrorResponse* mutable_errorresponse();
  void set_allocated_errorresponse(::chat::ErrorResponse* errorresponse);
  private:
  const ::chat::ErrorResponse& _internal_errorresponse() const;
  ::chat::ErrorResponse* _internal_mutable_errorresponse();
  public:

  // @@protoc_insertion_point(class_scope:chat.Mensaje)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr option_;
  ::chat::MiInfoRequest* miinforeq_;
  ::chat::BroadcastRequest* broadcastrequest_;
  ::chat::BroadcastResponse* broadcastresponse_;
  ::chat::CambioEstadoRequest* cambioestadorequest_;
  ::chat::UsuariosConectadosResponse* usuariosconectadosresponse_;
  ::chat::SolicitarInfoUsuarioRequest* solicitarinfousuariorequest_;
  ::chat::SolicitarInfoUsuarioResponse* solicitarinfousuarioresponse_;
  ::chat::MensajePrivadoRequest* mensajeprivadorequest_;
  ::chat::MensajePrivadoResponse* mensajeprivadoresponse_;
  ::chat::ErrorResponse* errorresponse_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MiInfoRequest

// required string username = 1;
inline bool MiInfoRequest::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MiInfoRequest::has_username() const {
  return _internal_has_username();
}
inline void MiInfoRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MiInfoRequest::username() const {
  // @@protoc_insertion_point(field_get:chat.MiInfoRequest.username)
  return _internal_username();
}
inline void MiInfoRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.MiInfoRequest.username)
}
inline std::string* MiInfoRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.MiInfoRequest.username)
  return _internal_mutable_username();
}
inline const std::string& MiInfoRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void MiInfoRequest::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MiInfoRequest::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.MiInfoRequest.username)
}
inline void MiInfoRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MiInfoRequest.username)
}
inline void MiInfoRequest::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MiInfoRequest.username)
}
inline std::string* MiInfoRequest::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MiInfoRequest::release_username() {
  // @@protoc_insertion_point(field_release:chat.MiInfoRequest.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MiInfoRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.MiInfoRequest.username)
}

// required string ip = 2;
inline bool MiInfoRequest::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MiInfoRequest::has_ip() const {
  return _internal_has_ip();
}
inline void MiInfoRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MiInfoRequest::ip() const {
  // @@protoc_insertion_point(field_get:chat.MiInfoRequest.ip)
  return _internal_ip();
}
inline void MiInfoRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:chat.MiInfoRequest.ip)
}
inline std::string* MiInfoRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:chat.MiInfoRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& MiInfoRequest::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void MiInfoRequest::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MiInfoRequest::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.MiInfoRequest.ip)
}
inline void MiInfoRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MiInfoRequest.ip)
}
inline void MiInfoRequest::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MiInfoRequest.ip)
}
inline std::string* MiInfoRequest::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MiInfoRequest::release_ip() {
  // @@protoc_insertion_point(field_release:chat.MiInfoRequest.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MiInfoRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:chat.MiInfoRequest.ip)
}

// -------------------------------------------------------------------

// BroadcastRequest

// required string message = 1;
inline bool BroadcastRequest::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BroadcastRequest::has_message() const {
  return _internal_has_message();
}
inline void BroadcastRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BroadcastRequest::message() const {
  // @@protoc_insertion_point(field_get:chat.BroadcastRequest.message)
  return _internal_message();
}
inline void BroadcastRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:chat.BroadcastRequest.message)
}
inline std::string* BroadcastRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.BroadcastRequest.message)
  return _internal_mutable_message();
}
inline const std::string& BroadcastRequest::_internal_message() const {
  return message_.GetNoArena();
}
inline void BroadcastRequest::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BroadcastRequest::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.BroadcastRequest.message)
}
inline void BroadcastRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.BroadcastRequest.message)
}
inline void BroadcastRequest::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.BroadcastRequest.message)
}
inline std::string* BroadcastRequest::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BroadcastRequest::release_message() {
  // @@protoc_insertion_point(field_release:chat.BroadcastRequest.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.BroadcastRequest.message)
}

// -------------------------------------------------------------------

// BroadcastResponse

// required string message = 1;
inline bool BroadcastResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BroadcastResponse::has_message() const {
  return _internal_has_message();
}
inline void BroadcastResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BroadcastResponse::message() const {
  // @@protoc_insertion_point(field_get:chat.BroadcastResponse.message)
  return _internal_message();
}
inline void BroadcastResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:chat.BroadcastResponse.message)
}
inline std::string* BroadcastResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.BroadcastResponse.message)
  return _internal_mutable_message();
}
inline const std::string& BroadcastResponse::_internal_message() const {
  return message_.GetNoArena();
}
inline void BroadcastResponse::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BroadcastResponse::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.BroadcastResponse.message)
}
inline void BroadcastResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.BroadcastResponse.message)
}
inline void BroadcastResponse::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.BroadcastResponse.message)
}
inline std::string* BroadcastResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BroadcastResponse::release_message() {
  // @@protoc_insertion_point(field_release:chat.BroadcastResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.BroadcastResponse.message)
}

// required string fromUsername = 2;
inline bool BroadcastResponse::_internal_has_fromusername() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BroadcastResponse::has_fromusername() const {
  return _internal_has_fromusername();
}
inline void BroadcastResponse::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BroadcastResponse::fromusername() const {
  // @@protoc_insertion_point(field_get:chat.BroadcastResponse.fromUsername)
  return _internal_fromusername();
}
inline void BroadcastResponse::set_fromusername(const std::string& value) {
  _internal_set_fromusername(value);
  // @@protoc_insertion_point(field_set:chat.BroadcastResponse.fromUsername)
}
inline std::string* BroadcastResponse::mutable_fromusername() {
  // @@protoc_insertion_point(field_mutable:chat.BroadcastResponse.fromUsername)
  return _internal_mutable_fromusername();
}
inline const std::string& BroadcastResponse::_internal_fromusername() const {
  return fromusername_.GetNoArena();
}
inline void BroadcastResponse::_internal_set_fromusername(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fromusername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BroadcastResponse::set_fromusername(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  fromusername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.BroadcastResponse.fromUsername)
}
inline void BroadcastResponse::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  fromusername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.BroadcastResponse.fromUsername)
}
inline void BroadcastResponse::set_fromusername(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  fromusername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.BroadcastResponse.fromUsername)
}
inline std::string* BroadcastResponse::_internal_mutable_fromusername() {
  _has_bits_[0] |= 0x00000002u;
  return fromusername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BroadcastResponse::release_fromusername() {
  // @@protoc_insertion_point(field_release:chat.BroadcastResponse.fromUsername)
  if (!_internal_has_fromusername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return fromusername_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastResponse::set_allocated_fromusername(std::string* fromusername) {
  if (fromusername != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fromusername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:chat.BroadcastResponse.fromUsername)
}

// -------------------------------------------------------------------

// CambioEstadoRequest

// required string nuevoEstado = 1;
inline bool CambioEstadoRequest::_internal_has_nuevoestado() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CambioEstadoRequest::has_nuevoestado() const {
  return _internal_has_nuevoestado();
}
inline void CambioEstadoRequest::clear_nuevoestado() {
  nuevoestado_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CambioEstadoRequest::nuevoestado() const {
  // @@protoc_insertion_point(field_get:chat.CambioEstadoRequest.nuevoEstado)
  return _internal_nuevoestado();
}
inline void CambioEstadoRequest::set_nuevoestado(const std::string& value) {
  _internal_set_nuevoestado(value);
  // @@protoc_insertion_point(field_set:chat.CambioEstadoRequest.nuevoEstado)
}
inline std::string* CambioEstadoRequest::mutable_nuevoestado() {
  // @@protoc_insertion_point(field_mutable:chat.CambioEstadoRequest.nuevoEstado)
  return _internal_mutable_nuevoestado();
}
inline const std::string& CambioEstadoRequest::_internal_nuevoestado() const {
  return nuevoestado_.GetNoArena();
}
inline void CambioEstadoRequest::_internal_set_nuevoestado(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nuevoestado_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CambioEstadoRequest::set_nuevoestado(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nuevoestado_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.CambioEstadoRequest.nuevoEstado)
}
inline void CambioEstadoRequest::set_nuevoestado(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nuevoestado_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CambioEstadoRequest.nuevoEstado)
}
inline void CambioEstadoRequest::set_nuevoestado(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nuevoestado_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CambioEstadoRequest.nuevoEstado)
}
inline std::string* CambioEstadoRequest::_internal_mutable_nuevoestado() {
  _has_bits_[0] |= 0x00000001u;
  return nuevoestado_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CambioEstadoRequest::release_nuevoestado() {
  // @@protoc_insertion_point(field_release:chat.CambioEstadoRequest.nuevoEstado)
  if (!_internal_has_nuevoestado()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nuevoestado_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CambioEstadoRequest::set_allocated_nuevoestado(std::string* nuevoestado) {
  if (nuevoestado != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nuevoestado_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nuevoestado);
  // @@protoc_insertion_point(field_set_allocated:chat.CambioEstadoRequest.nuevoEstado)
}

// -------------------------------------------------------------------

// UsuarioConectado

// required string username = 1;
inline bool UsuarioConectado::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UsuarioConectado::has_username() const {
  return _internal_has_username();
}
inline void UsuarioConectado::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UsuarioConectado::username() const {
  // @@protoc_insertion_point(field_get:chat.UsuarioConectado.username)
  return _internal_username();
}
inline void UsuarioConectado::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.UsuarioConectado.username)
}
inline std::string* UsuarioConectado::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.UsuarioConectado.username)
  return _internal_mutable_username();
}
inline const std::string& UsuarioConectado::_internal_username() const {
  return username_.GetNoArena();
}
inline void UsuarioConectado::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UsuarioConectado::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.UsuarioConectado.username)
}
inline void UsuarioConectado::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UsuarioConectado.username)
}
inline void UsuarioConectado::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UsuarioConectado.username)
}
inline std::string* UsuarioConectado::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UsuarioConectado::release_username() {
  // @@protoc_insertion_point(field_release:chat.UsuarioConectado.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UsuarioConectado::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.UsuarioConectado.username)
}

// required string estado = 2;
inline bool UsuarioConectado::_internal_has_estado() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UsuarioConectado::has_estado() const {
  return _internal_has_estado();
}
inline void UsuarioConectado::clear_estado() {
  estado_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UsuarioConectado::estado() const {
  // @@protoc_insertion_point(field_get:chat.UsuarioConectado.estado)
  return _internal_estado();
}
inline void UsuarioConectado::set_estado(const std::string& value) {
  _internal_set_estado(value);
  // @@protoc_insertion_point(field_set:chat.UsuarioConectado.estado)
}
inline std::string* UsuarioConectado::mutable_estado() {
  // @@protoc_insertion_point(field_mutable:chat.UsuarioConectado.estado)
  return _internal_mutable_estado();
}
inline const std::string& UsuarioConectado::_internal_estado() const {
  return estado_.GetNoArena();
}
inline void UsuarioConectado::_internal_set_estado(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  estado_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UsuarioConectado::set_estado(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  estado_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.UsuarioConectado.estado)
}
inline void UsuarioConectado::set_estado(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  estado_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UsuarioConectado.estado)
}
inline void UsuarioConectado::set_estado(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  estado_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UsuarioConectado.estado)
}
inline std::string* UsuarioConectado::_internal_mutable_estado() {
  _has_bits_[0] |= 0x00000002u;
  return estado_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UsuarioConectado::release_estado() {
  // @@protoc_insertion_point(field_release:chat.UsuarioConectado.estado)
  if (!_internal_has_estado()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return estado_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UsuarioConectado::set_allocated_estado(std::string* estado) {
  if (estado != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  estado_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), estado);
  // @@protoc_insertion_point(field_set_allocated:chat.UsuarioConectado.estado)
}

// required string id = 3;
inline bool UsuarioConectado::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UsuarioConectado::has_id() const {
  return _internal_has_id();
}
inline void UsuarioConectado::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UsuarioConectado::id() const {
  // @@protoc_insertion_point(field_get:chat.UsuarioConectado.id)
  return _internal_id();
}
inline void UsuarioConectado::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:chat.UsuarioConectado.id)
}
inline std::string* UsuarioConectado::mutable_id() {
  // @@protoc_insertion_point(field_mutable:chat.UsuarioConectado.id)
  return _internal_mutable_id();
}
inline const std::string& UsuarioConectado::_internal_id() const {
  return id_.GetNoArena();
}
inline void UsuarioConectado::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UsuarioConectado::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.UsuarioConectado.id)
}
inline void UsuarioConectado::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UsuarioConectado.id)
}
inline void UsuarioConectado::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UsuarioConectado.id)
}
inline std::string* UsuarioConectado::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000004u;
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UsuarioConectado::release_id() {
  // @@protoc_insertion_point(field_release:chat.UsuarioConectado.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UsuarioConectado::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:chat.UsuarioConectado.id)
}

// required string ip = 4;
inline bool UsuarioConectado::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UsuarioConectado::has_ip() const {
  return _internal_has_ip();
}
inline void UsuarioConectado::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& UsuarioConectado::ip() const {
  // @@protoc_insertion_point(field_get:chat.UsuarioConectado.ip)
  return _internal_ip();
}
inline void UsuarioConectado::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:chat.UsuarioConectado.ip)
}
inline std::string* UsuarioConectado::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:chat.UsuarioConectado.ip)
  return _internal_mutable_ip();
}
inline const std::string& UsuarioConectado::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void UsuarioConectado::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UsuarioConectado::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.UsuarioConectado.ip)
}
inline void UsuarioConectado::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UsuarioConectado.ip)
}
inline void UsuarioConectado::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UsuarioConectado.ip)
}
inline std::string* UsuarioConectado::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000008u;
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UsuarioConectado::release_ip() {
  // @@protoc_insertion_point(field_release:chat.UsuarioConectado.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UsuarioConectado::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:chat.UsuarioConectado.ip)
}

// -------------------------------------------------------------------

// UsuariosConectadosResponse

// repeated .chat.UsuarioConectado usuariosConectados = 1;
inline int UsuariosConectadosResponse::_internal_usuariosconectados_size() const {
  return usuariosconectados_.size();
}
inline int UsuariosConectadosResponse::usuariosconectados_size() const {
  return _internal_usuariosconectados_size();
}
inline void UsuariosConectadosResponse::clear_usuariosconectados() {
  usuariosconectados_.Clear();
}
inline ::chat::UsuarioConectado* UsuariosConectadosResponse::mutable_usuariosconectados(int index) {
  // @@protoc_insertion_point(field_mutable:chat.UsuariosConectadosResponse.usuariosConectados)
  return usuariosconectados_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UsuarioConectado >*
UsuariosConectadosResponse::mutable_usuariosconectados() {
  // @@protoc_insertion_point(field_mutable_list:chat.UsuariosConectadosResponse.usuariosConectados)
  return &usuariosconectados_;
}
inline const ::chat::UsuarioConectado& UsuariosConectadosResponse::_internal_usuariosconectados(int index) const {
  return usuariosconectados_.Get(index);
}
inline const ::chat::UsuarioConectado& UsuariosConectadosResponse::usuariosconectados(int index) const {
  // @@protoc_insertion_point(field_get:chat.UsuariosConectadosResponse.usuariosConectados)
  return _internal_usuariosconectados(index);
}
inline ::chat::UsuarioConectado* UsuariosConectadosResponse::_internal_add_usuariosconectados() {
  return usuariosconectados_.Add();
}
inline ::chat::UsuarioConectado* UsuariosConectadosResponse::add_usuariosconectados() {
  // @@protoc_insertion_point(field_add:chat.UsuariosConectadosResponse.usuariosConectados)
  return _internal_add_usuariosconectados();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UsuarioConectado >&
UsuariosConectadosResponse::usuariosconectados() const {
  // @@protoc_insertion_point(field_list:chat.UsuariosConectadosResponse.usuariosConectados)
  return usuariosconectados_;
}

// -------------------------------------------------------------------

// SolicitarInfoUsuarioRequest

// required string userId = 1;
inline bool SolicitarInfoUsuarioRequest::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SolicitarInfoUsuarioRequest::has_userid() const {
  return _internal_has_userid();
}
inline void SolicitarInfoUsuarioRequest::clear_userid() {
  userid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SolicitarInfoUsuarioRequest::userid() const {
  // @@protoc_insertion_point(field_get:chat.SolicitarInfoUsuarioRequest.userId)
  return _internal_userid();
}
inline void SolicitarInfoUsuarioRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:chat.SolicitarInfoUsuarioRequest.userId)
}
inline std::string* SolicitarInfoUsuarioRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:chat.SolicitarInfoUsuarioRequest.userId)
  return _internal_mutable_userid();
}
inline const std::string& SolicitarInfoUsuarioRequest::_internal_userid() const {
  return userid_.GetNoArena();
}
inline void SolicitarInfoUsuarioRequest::_internal_set_userid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SolicitarInfoUsuarioRequest::set_userid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  userid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.SolicitarInfoUsuarioRequest.userId)
}
inline void SolicitarInfoUsuarioRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.SolicitarInfoUsuarioRequest.userId)
}
inline void SolicitarInfoUsuarioRequest::set_userid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.SolicitarInfoUsuarioRequest.userId)
}
inline std::string* SolicitarInfoUsuarioRequest::_internal_mutable_userid() {
  _has_bits_[0] |= 0x00000001u;
  return userid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SolicitarInfoUsuarioRequest::release_userid() {
  // @@protoc_insertion_point(field_release:chat.SolicitarInfoUsuarioRequest.userId)
  if (!_internal_has_userid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return userid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SolicitarInfoUsuarioRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  userid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.SolicitarInfoUsuarioRequest.userId)
}

// -------------------------------------------------------------------

// SolicitarInfoUsuarioResponse

// required .chat.UsuarioConectado usuarioConectado = 1;
inline bool SolicitarInfoUsuarioResponse::_internal_has_usuarioconectado() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || usuarioconectado_ != nullptr);
  return value;
}
inline bool SolicitarInfoUsuarioResponse::has_usuarioconectado() const {
  return _internal_has_usuarioconectado();
}
inline void SolicitarInfoUsuarioResponse::clear_usuarioconectado() {
  if (usuarioconectado_ != nullptr) usuarioconectado_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::chat::UsuarioConectado& SolicitarInfoUsuarioResponse::_internal_usuarioconectado() const {
  const ::chat::UsuarioConectado* p = usuarioconectado_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::UsuarioConectado*>(
      &::chat::_UsuarioConectado_default_instance_);
}
inline const ::chat::UsuarioConectado& SolicitarInfoUsuarioResponse::usuarioconectado() const {
  // @@protoc_insertion_point(field_get:chat.SolicitarInfoUsuarioResponse.usuarioConectado)
  return _internal_usuarioconectado();
}
inline ::chat::UsuarioConectado* SolicitarInfoUsuarioResponse::release_usuarioconectado() {
  // @@protoc_insertion_point(field_release:chat.SolicitarInfoUsuarioResponse.usuarioConectado)
  _has_bits_[0] &= ~0x00000001u;
  ::chat::UsuarioConectado* temp = usuarioconectado_;
  usuarioconectado_ = nullptr;
  return temp;
}
inline ::chat::UsuarioConectado* SolicitarInfoUsuarioResponse::_internal_mutable_usuarioconectado() {
  _has_bits_[0] |= 0x00000001u;
  if (usuarioconectado_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::UsuarioConectado>(GetArenaNoVirtual());
    usuarioconectado_ = p;
  }
  return usuarioconectado_;
}
inline ::chat::UsuarioConectado* SolicitarInfoUsuarioResponse::mutable_usuarioconectado() {
  // @@protoc_insertion_point(field_mutable:chat.SolicitarInfoUsuarioResponse.usuarioConectado)
  return _internal_mutable_usuarioconectado();
}
inline void SolicitarInfoUsuarioResponse::set_allocated_usuarioconectado(::chat::UsuarioConectado* usuarioconectado) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete usuarioconectado_;
  }
  if (usuarioconectado) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      usuarioconectado = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usuarioconectado, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  usuarioconectado_ = usuarioconectado;
  // @@protoc_insertion_point(field_set_allocated:chat.SolicitarInfoUsuarioResponse.usuarioConectado)
}

// -------------------------------------------------------------------

// MensajePrivadoRequest

// required string message = 1;
inline bool MensajePrivadoRequest::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MensajePrivadoRequest::has_message() const {
  return _internal_has_message();
}
inline void MensajePrivadoRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MensajePrivadoRequest::message() const {
  // @@protoc_insertion_point(field_get:chat.MensajePrivadoRequest.message)
  return _internal_message();
}
inline void MensajePrivadoRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:chat.MensajePrivadoRequest.message)
}
inline std::string* MensajePrivadoRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.MensajePrivadoRequest.message)
  return _internal_mutable_message();
}
inline const std::string& MensajePrivadoRequest::_internal_message() const {
  return message_.GetNoArena();
}
inline void MensajePrivadoRequest::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MensajePrivadoRequest::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.MensajePrivadoRequest.message)
}
inline void MensajePrivadoRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MensajePrivadoRequest.message)
}
inline void MensajePrivadoRequest::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MensajePrivadoRequest.message)
}
inline std::string* MensajePrivadoRequest::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MensajePrivadoRequest::release_message() {
  // @@protoc_insertion_point(field_release:chat.MensajePrivadoRequest.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MensajePrivadoRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.MensajePrivadoRequest.message)
}

// required string toUserIp = 2;
inline bool MensajePrivadoRequest::_internal_has_touserip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MensajePrivadoRequest::has_touserip() const {
  return _internal_has_touserip();
}
inline void MensajePrivadoRequest::clear_touserip() {
  touserip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MensajePrivadoRequest::touserip() const {
  // @@protoc_insertion_point(field_get:chat.MensajePrivadoRequest.toUserIp)
  return _internal_touserip();
}
inline void MensajePrivadoRequest::set_touserip(const std::string& value) {
  _internal_set_touserip(value);
  // @@protoc_insertion_point(field_set:chat.MensajePrivadoRequest.toUserIp)
}
inline std::string* MensajePrivadoRequest::mutable_touserip() {
  // @@protoc_insertion_point(field_mutable:chat.MensajePrivadoRequest.toUserIp)
  return _internal_mutable_touserip();
}
inline const std::string& MensajePrivadoRequest::_internal_touserip() const {
  return touserip_.GetNoArena();
}
inline void MensajePrivadoRequest::_internal_set_touserip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  touserip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MensajePrivadoRequest::set_touserip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  touserip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.MensajePrivadoRequest.toUserIp)
}
inline void MensajePrivadoRequest::set_touserip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  touserip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MensajePrivadoRequest.toUserIp)
}
inline void MensajePrivadoRequest::set_touserip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  touserip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MensajePrivadoRequest.toUserIp)
}
inline std::string* MensajePrivadoRequest::_internal_mutable_touserip() {
  _has_bits_[0] |= 0x00000002u;
  return touserip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MensajePrivadoRequest::release_touserip() {
  // @@protoc_insertion_point(field_release:chat.MensajePrivadoRequest.toUserIp)
  if (!_internal_has_touserip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return touserip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MensajePrivadoRequest::set_allocated_touserip(std::string* touserip) {
  if (touserip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  touserip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), touserip);
  // @@protoc_insertion_point(field_set_allocated:chat.MensajePrivadoRequest.toUserIp)
}

// -------------------------------------------------------------------

// MensajePrivadoResponse

// required string message = 1;
inline bool MensajePrivadoResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MensajePrivadoResponse::has_message() const {
  return _internal_has_message();
}
inline void MensajePrivadoResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MensajePrivadoResponse::message() const {
  // @@protoc_insertion_point(field_get:chat.MensajePrivadoResponse.message)
  return _internal_message();
}
inline void MensajePrivadoResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:chat.MensajePrivadoResponse.message)
}
inline std::string* MensajePrivadoResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.MensajePrivadoResponse.message)
  return _internal_mutable_message();
}
inline const std::string& MensajePrivadoResponse::_internal_message() const {
  return message_.GetNoArena();
}
inline void MensajePrivadoResponse::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MensajePrivadoResponse::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.MensajePrivadoResponse.message)
}
inline void MensajePrivadoResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MensajePrivadoResponse.message)
}
inline void MensajePrivadoResponse::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MensajePrivadoResponse.message)
}
inline std::string* MensajePrivadoResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MensajePrivadoResponse::release_message() {
  // @@protoc_insertion_point(field_release:chat.MensajePrivadoResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MensajePrivadoResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.MensajePrivadoResponse.message)
}

// required string fromUsername = 2;
inline bool MensajePrivadoResponse::_internal_has_fromusername() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MensajePrivadoResponse::has_fromusername() const {
  return _internal_has_fromusername();
}
inline void MensajePrivadoResponse::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MensajePrivadoResponse::fromusername() const {
  // @@protoc_insertion_point(field_get:chat.MensajePrivadoResponse.fromUsername)
  return _internal_fromusername();
}
inline void MensajePrivadoResponse::set_fromusername(const std::string& value) {
  _internal_set_fromusername(value);
  // @@protoc_insertion_point(field_set:chat.MensajePrivadoResponse.fromUsername)
}
inline std::string* MensajePrivadoResponse::mutable_fromusername() {
  // @@protoc_insertion_point(field_mutable:chat.MensajePrivadoResponse.fromUsername)
  return _internal_mutable_fromusername();
}
inline const std::string& MensajePrivadoResponse::_internal_fromusername() const {
  return fromusername_.GetNoArena();
}
inline void MensajePrivadoResponse::_internal_set_fromusername(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fromusername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MensajePrivadoResponse::set_fromusername(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  fromusername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.MensajePrivadoResponse.fromUsername)
}
inline void MensajePrivadoResponse::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  fromusername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MensajePrivadoResponse.fromUsername)
}
inline void MensajePrivadoResponse::set_fromusername(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  fromusername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MensajePrivadoResponse.fromUsername)
}
inline std::string* MensajePrivadoResponse::_internal_mutable_fromusername() {
  _has_bits_[0] |= 0x00000002u;
  return fromusername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MensajePrivadoResponse::release_fromusername() {
  // @@protoc_insertion_point(field_release:chat.MensajePrivadoResponse.fromUsername)
  if (!_internal_has_fromusername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return fromusername_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MensajePrivadoResponse::set_allocated_fromusername(std::string* fromusername) {
  if (fromusername != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fromusername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:chat.MensajePrivadoResponse.fromUsername)
}

// required string fromUserIp = 3;
inline bool MensajePrivadoResponse::_internal_has_fromuserip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MensajePrivadoResponse::has_fromuserip() const {
  return _internal_has_fromuserip();
}
inline void MensajePrivadoResponse::clear_fromuserip() {
  fromuserip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MensajePrivadoResponse::fromuserip() const {
  // @@protoc_insertion_point(field_get:chat.MensajePrivadoResponse.fromUserIp)
  return _internal_fromuserip();
}
inline void MensajePrivadoResponse::set_fromuserip(const std::string& value) {
  _internal_set_fromuserip(value);
  // @@protoc_insertion_point(field_set:chat.MensajePrivadoResponse.fromUserIp)
}
inline std::string* MensajePrivadoResponse::mutable_fromuserip() {
  // @@protoc_insertion_point(field_mutable:chat.MensajePrivadoResponse.fromUserIp)
  return _internal_mutable_fromuserip();
}
inline const std::string& MensajePrivadoResponse::_internal_fromuserip() const {
  return fromuserip_.GetNoArena();
}
inline void MensajePrivadoResponse::_internal_set_fromuserip(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  fromuserip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MensajePrivadoResponse::set_fromuserip(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  fromuserip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.MensajePrivadoResponse.fromUserIp)
}
inline void MensajePrivadoResponse::set_fromuserip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  fromuserip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MensajePrivadoResponse.fromUserIp)
}
inline void MensajePrivadoResponse::set_fromuserip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  fromuserip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MensajePrivadoResponse.fromUserIp)
}
inline std::string* MensajePrivadoResponse::_internal_mutable_fromuserip() {
  _has_bits_[0] |= 0x00000004u;
  return fromuserip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MensajePrivadoResponse::release_fromuserip() {
  // @@protoc_insertion_point(field_release:chat.MensajePrivadoResponse.fromUserIp)
  if (!_internal_has_fromuserip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return fromuserip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MensajePrivadoResponse::set_allocated_fromuserip(std::string* fromuserip) {
  if (fromuserip != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  fromuserip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromuserip);
  // @@protoc_insertion_point(field_set_allocated:chat.MensajePrivadoResponse.fromUserIp)
}

// -------------------------------------------------------------------

// ErrorResponse

// required string message = 1;
inline bool ErrorResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ErrorResponse::has_message() const {
  return _internal_has_message();
}
inline void ErrorResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ErrorResponse::message() const {
  // @@protoc_insertion_point(field_get:chat.ErrorResponse.message)
  return _internal_message();
}
inline void ErrorResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:chat.ErrorResponse.message)
}
inline std::string* ErrorResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.ErrorResponse.message)
  return _internal_mutable_message();
}
inline const std::string& ErrorResponse::_internal_message() const {
  return message_.GetNoArena();
}
inline void ErrorResponse::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ErrorResponse::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.ErrorResponse.message)
}
inline void ErrorResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ErrorResponse.message)
}
inline void ErrorResponse::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ErrorResponse.message)
}
inline std::string* ErrorResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ErrorResponse::release_message() {
  // @@protoc_insertion_point(field_release:chat.ErrorResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.ErrorResponse.message)
}

// -------------------------------------------------------------------

// Mensaje

// required string option = 1;
inline bool Mensaje::_internal_has_option() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Mensaje::has_option() const {
  return _internal_has_option();
}
inline void Mensaje::clear_option() {
  option_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Mensaje::option() const {
  // @@protoc_insertion_point(field_get:chat.Mensaje.option)
  return _internal_option();
}
inline void Mensaje::set_option(const std::string& value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:chat.Mensaje.option)
}
inline std::string* Mensaje::mutable_option() {
  // @@protoc_insertion_point(field_mutable:chat.Mensaje.option)
  return _internal_mutable_option();
}
inline const std::string& Mensaje::_internal_option() const {
  return option_.GetNoArena();
}
inline void Mensaje::_internal_set_option(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  option_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Mensaje::set_option(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  option_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.Mensaje.option)
}
inline void Mensaje::set_option(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  option_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Mensaje.option)
}
inline void Mensaje::set_option(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  option_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Mensaje.option)
}
inline std::string* Mensaje::_internal_mutable_option() {
  _has_bits_[0] |= 0x00000001u;
  return option_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Mensaje::release_option() {
  // @@protoc_insertion_point(field_release:chat.Mensaje.option)
  if (!_internal_has_option()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return option_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Mensaje::set_allocated_option(std::string* option) {
  if (option != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  option_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), option);
  // @@protoc_insertion_point(field_set_allocated:chat.Mensaje.option)
}

// optional .chat.MiInfoRequest miInfoReq = 2;
inline bool Mensaje::_internal_has_miinforeq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || miinforeq_ != nullptr);
  return value;
}
inline bool Mensaje::has_miinforeq() const {
  return _internal_has_miinforeq();
}
inline void Mensaje::clear_miinforeq() {
  if (miinforeq_ != nullptr) miinforeq_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::chat::MiInfoRequest& Mensaje::_internal_miinforeq() const {
  const ::chat::MiInfoRequest* p = miinforeq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::MiInfoRequest*>(
      &::chat::_MiInfoRequest_default_instance_);
}
inline const ::chat::MiInfoRequest& Mensaje::miinforeq() const {
  // @@protoc_insertion_point(field_get:chat.Mensaje.miInfoReq)
  return _internal_miinforeq();
}
inline ::chat::MiInfoRequest* Mensaje::release_miinforeq() {
  // @@protoc_insertion_point(field_release:chat.Mensaje.miInfoReq)
  _has_bits_[0] &= ~0x00000002u;
  ::chat::MiInfoRequest* temp = miinforeq_;
  miinforeq_ = nullptr;
  return temp;
}
inline ::chat::MiInfoRequest* Mensaje::_internal_mutable_miinforeq() {
  _has_bits_[0] |= 0x00000002u;
  if (miinforeq_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::MiInfoRequest>(GetArenaNoVirtual());
    miinforeq_ = p;
  }
  return miinforeq_;
}
inline ::chat::MiInfoRequest* Mensaje::mutable_miinforeq() {
  // @@protoc_insertion_point(field_mutable:chat.Mensaje.miInfoReq)
  return _internal_mutable_miinforeq();
}
inline void Mensaje::set_allocated_miinforeq(::chat::MiInfoRequest* miinforeq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete miinforeq_;
  }
  if (miinforeq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      miinforeq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, miinforeq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  miinforeq_ = miinforeq;
  // @@protoc_insertion_point(field_set_allocated:chat.Mensaje.miInfoReq)
}

// optional .chat.BroadcastRequest broadcastRequest = 3;
inline bool Mensaje::_internal_has_broadcastrequest() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || broadcastrequest_ != nullptr);
  return value;
}
inline bool Mensaje::has_broadcastrequest() const {
  return _internal_has_broadcastrequest();
}
inline void Mensaje::clear_broadcastrequest() {
  if (broadcastrequest_ != nullptr) broadcastrequest_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::chat::BroadcastRequest& Mensaje::_internal_broadcastrequest() const {
  const ::chat::BroadcastRequest* p = broadcastrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::BroadcastRequest*>(
      &::chat::_BroadcastRequest_default_instance_);
}
inline const ::chat::BroadcastRequest& Mensaje::broadcastrequest() const {
  // @@protoc_insertion_point(field_get:chat.Mensaje.broadcastRequest)
  return _internal_broadcastrequest();
}
inline ::chat::BroadcastRequest* Mensaje::release_broadcastrequest() {
  // @@protoc_insertion_point(field_release:chat.Mensaje.broadcastRequest)
  _has_bits_[0] &= ~0x00000004u;
  ::chat::BroadcastRequest* temp = broadcastrequest_;
  broadcastrequest_ = nullptr;
  return temp;
}
inline ::chat::BroadcastRequest* Mensaje::_internal_mutable_broadcastrequest() {
  _has_bits_[0] |= 0x00000004u;
  if (broadcastrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::BroadcastRequest>(GetArenaNoVirtual());
    broadcastrequest_ = p;
  }
  return broadcastrequest_;
}
inline ::chat::BroadcastRequest* Mensaje::mutable_broadcastrequest() {
  // @@protoc_insertion_point(field_mutable:chat.Mensaje.broadcastRequest)
  return _internal_mutable_broadcastrequest();
}
inline void Mensaje::set_allocated_broadcastrequest(::chat::BroadcastRequest* broadcastrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete broadcastrequest_;
  }
  if (broadcastrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      broadcastrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcastrequest, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  broadcastrequest_ = broadcastrequest;
  // @@protoc_insertion_point(field_set_allocated:chat.Mensaje.broadcastRequest)
}

// optional .chat.BroadcastResponse broadcastResponse = 4;
inline bool Mensaje::_internal_has_broadcastresponse() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || broadcastresponse_ != nullptr);
  return value;
}
inline bool Mensaje::has_broadcastresponse() const {
  return _internal_has_broadcastresponse();
}
inline void Mensaje::clear_broadcastresponse() {
  if (broadcastresponse_ != nullptr) broadcastresponse_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::chat::BroadcastResponse& Mensaje::_internal_broadcastresponse() const {
  const ::chat::BroadcastResponse* p = broadcastresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::BroadcastResponse*>(
      &::chat::_BroadcastResponse_default_instance_);
}
inline const ::chat::BroadcastResponse& Mensaje::broadcastresponse() const {
  // @@protoc_insertion_point(field_get:chat.Mensaje.broadcastResponse)
  return _internal_broadcastresponse();
}
inline ::chat::BroadcastResponse* Mensaje::release_broadcastresponse() {
  // @@protoc_insertion_point(field_release:chat.Mensaje.broadcastResponse)
  _has_bits_[0] &= ~0x00000008u;
  ::chat::BroadcastResponse* temp = broadcastresponse_;
  broadcastresponse_ = nullptr;
  return temp;
}
inline ::chat::BroadcastResponse* Mensaje::_internal_mutable_broadcastresponse() {
  _has_bits_[0] |= 0x00000008u;
  if (broadcastresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::BroadcastResponse>(GetArenaNoVirtual());
    broadcastresponse_ = p;
  }
  return broadcastresponse_;
}
inline ::chat::BroadcastResponse* Mensaje::mutable_broadcastresponse() {
  // @@protoc_insertion_point(field_mutable:chat.Mensaje.broadcastResponse)
  return _internal_mutable_broadcastresponse();
}
inline void Mensaje::set_allocated_broadcastresponse(::chat::BroadcastResponse* broadcastresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete broadcastresponse_;
  }
  if (broadcastresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      broadcastresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcastresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  broadcastresponse_ = broadcastresponse;
  // @@protoc_insertion_point(field_set_allocated:chat.Mensaje.broadcastResponse)
}

// optional .chat.CambioEstadoRequest cambioEstadoRequest = 5;
inline bool Mensaje::_internal_has_cambioestadorequest() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || cambioestadorequest_ != nullptr);
  return value;
}
inline bool Mensaje::has_cambioestadorequest() const {
  return _internal_has_cambioestadorequest();
}
inline void Mensaje::clear_cambioestadorequest() {
  if (cambioestadorequest_ != nullptr) cambioestadorequest_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::chat::CambioEstadoRequest& Mensaje::_internal_cambioestadorequest() const {
  const ::chat::CambioEstadoRequest* p = cambioestadorequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::CambioEstadoRequest*>(
      &::chat::_CambioEstadoRequest_default_instance_);
}
inline const ::chat::CambioEstadoRequest& Mensaje::cambioestadorequest() const {
  // @@protoc_insertion_point(field_get:chat.Mensaje.cambioEstadoRequest)
  return _internal_cambioestadorequest();
}
inline ::chat::CambioEstadoRequest* Mensaje::release_cambioestadorequest() {
  // @@protoc_insertion_point(field_release:chat.Mensaje.cambioEstadoRequest)
  _has_bits_[0] &= ~0x00000010u;
  ::chat::CambioEstadoRequest* temp = cambioestadorequest_;
  cambioestadorequest_ = nullptr;
  return temp;
}
inline ::chat::CambioEstadoRequest* Mensaje::_internal_mutable_cambioestadorequest() {
  _has_bits_[0] |= 0x00000010u;
  if (cambioestadorequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::CambioEstadoRequest>(GetArenaNoVirtual());
    cambioestadorequest_ = p;
  }
  return cambioestadorequest_;
}
inline ::chat::CambioEstadoRequest* Mensaje::mutable_cambioestadorequest() {
  // @@protoc_insertion_point(field_mutable:chat.Mensaje.cambioEstadoRequest)
  return _internal_mutable_cambioestadorequest();
}
inline void Mensaje::set_allocated_cambioestadorequest(::chat::CambioEstadoRequest* cambioestadorequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cambioestadorequest_;
  }
  if (cambioestadorequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cambioestadorequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cambioestadorequest, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cambioestadorequest_ = cambioestadorequest;
  // @@protoc_insertion_point(field_set_allocated:chat.Mensaje.cambioEstadoRequest)
}

// optional .chat.UsuariosConectadosResponse usuariosConectadosResponse = 6;
inline bool Mensaje::_internal_has_usuariosconectadosresponse() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || usuariosconectadosresponse_ != nullptr);
  return value;
}
inline bool Mensaje::has_usuariosconectadosresponse() const {
  return _internal_has_usuariosconectadosresponse();
}
inline void Mensaje::clear_usuariosconectadosresponse() {
  if (usuariosconectadosresponse_ != nullptr) usuariosconectadosresponse_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::chat::UsuariosConectadosResponse& Mensaje::_internal_usuariosconectadosresponse() const {
  const ::chat::UsuariosConectadosResponse* p = usuariosconectadosresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::UsuariosConectadosResponse*>(
      &::chat::_UsuariosConectadosResponse_default_instance_);
}
inline const ::chat::UsuariosConectadosResponse& Mensaje::usuariosconectadosresponse() const {
  // @@protoc_insertion_point(field_get:chat.Mensaje.usuariosConectadosResponse)
  return _internal_usuariosconectadosresponse();
}
inline ::chat::UsuariosConectadosResponse* Mensaje::release_usuariosconectadosresponse() {
  // @@protoc_insertion_point(field_release:chat.Mensaje.usuariosConectadosResponse)
  _has_bits_[0] &= ~0x00000020u;
  ::chat::UsuariosConectadosResponse* temp = usuariosconectadosresponse_;
  usuariosconectadosresponse_ = nullptr;
  return temp;
}
inline ::chat::UsuariosConectadosResponse* Mensaje::_internal_mutable_usuariosconectadosresponse() {
  _has_bits_[0] |= 0x00000020u;
  if (usuariosconectadosresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::UsuariosConectadosResponse>(GetArenaNoVirtual());
    usuariosconectadosresponse_ = p;
  }
  return usuariosconectadosresponse_;
}
inline ::chat::UsuariosConectadosResponse* Mensaje::mutable_usuariosconectadosresponse() {
  // @@protoc_insertion_point(field_mutable:chat.Mensaje.usuariosConectadosResponse)
  return _internal_mutable_usuariosconectadosresponse();
}
inline void Mensaje::set_allocated_usuariosconectadosresponse(::chat::UsuariosConectadosResponse* usuariosconectadosresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete usuariosconectadosresponse_;
  }
  if (usuariosconectadosresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      usuariosconectadosresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usuariosconectadosresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  usuariosconectadosresponse_ = usuariosconectadosresponse;
  // @@protoc_insertion_point(field_set_allocated:chat.Mensaje.usuariosConectadosResponse)
}

// optional .chat.SolicitarInfoUsuarioRequest solicitarInfoUsuarioRequest = 7;
inline bool Mensaje::_internal_has_solicitarinfousuariorequest() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || solicitarinfousuariorequest_ != nullptr);
  return value;
}
inline bool Mensaje::has_solicitarinfousuariorequest() const {
  return _internal_has_solicitarinfousuariorequest();
}
inline void Mensaje::clear_solicitarinfousuariorequest() {
  if (solicitarinfousuariorequest_ != nullptr) solicitarinfousuariorequest_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::chat::SolicitarInfoUsuarioRequest& Mensaje::_internal_solicitarinfousuariorequest() const {
  const ::chat::SolicitarInfoUsuarioRequest* p = solicitarinfousuariorequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::SolicitarInfoUsuarioRequest*>(
      &::chat::_SolicitarInfoUsuarioRequest_default_instance_);
}
inline const ::chat::SolicitarInfoUsuarioRequest& Mensaje::solicitarinfousuariorequest() const {
  // @@protoc_insertion_point(field_get:chat.Mensaje.solicitarInfoUsuarioRequest)
  return _internal_solicitarinfousuariorequest();
}
inline ::chat::SolicitarInfoUsuarioRequest* Mensaje::release_solicitarinfousuariorequest() {
  // @@protoc_insertion_point(field_release:chat.Mensaje.solicitarInfoUsuarioRequest)
  _has_bits_[0] &= ~0x00000040u;
  ::chat::SolicitarInfoUsuarioRequest* temp = solicitarinfousuariorequest_;
  solicitarinfousuariorequest_ = nullptr;
  return temp;
}
inline ::chat::SolicitarInfoUsuarioRequest* Mensaje::_internal_mutable_solicitarinfousuariorequest() {
  _has_bits_[0] |= 0x00000040u;
  if (solicitarinfousuariorequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::SolicitarInfoUsuarioRequest>(GetArenaNoVirtual());
    solicitarinfousuariorequest_ = p;
  }
  return solicitarinfousuariorequest_;
}
inline ::chat::SolicitarInfoUsuarioRequest* Mensaje::mutable_solicitarinfousuariorequest() {
  // @@protoc_insertion_point(field_mutable:chat.Mensaje.solicitarInfoUsuarioRequest)
  return _internal_mutable_solicitarinfousuariorequest();
}
inline void Mensaje::set_allocated_solicitarinfousuariorequest(::chat::SolicitarInfoUsuarioRequest* solicitarinfousuariorequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete solicitarinfousuariorequest_;
  }
  if (solicitarinfousuariorequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      solicitarinfousuariorequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solicitarinfousuariorequest, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  solicitarinfousuariorequest_ = solicitarinfousuariorequest;
  // @@protoc_insertion_point(field_set_allocated:chat.Mensaje.solicitarInfoUsuarioRequest)
}

// optional .chat.SolicitarInfoUsuarioResponse solicitarInfoUsuarioResponse = 8;
inline bool Mensaje::_internal_has_solicitarinfousuarioresponse() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || solicitarinfousuarioresponse_ != nullptr);
  return value;
}
inline bool Mensaje::has_solicitarinfousuarioresponse() const {
  return _internal_has_solicitarinfousuarioresponse();
}
inline void Mensaje::clear_solicitarinfousuarioresponse() {
  if (solicitarinfousuarioresponse_ != nullptr) solicitarinfousuarioresponse_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::chat::SolicitarInfoUsuarioResponse& Mensaje::_internal_solicitarinfousuarioresponse() const {
  const ::chat::SolicitarInfoUsuarioResponse* p = solicitarinfousuarioresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::SolicitarInfoUsuarioResponse*>(
      &::chat::_SolicitarInfoUsuarioResponse_default_instance_);
}
inline const ::chat::SolicitarInfoUsuarioResponse& Mensaje::solicitarinfousuarioresponse() const {
  // @@protoc_insertion_point(field_get:chat.Mensaje.solicitarInfoUsuarioResponse)
  return _internal_solicitarinfousuarioresponse();
}
inline ::chat::SolicitarInfoUsuarioResponse* Mensaje::release_solicitarinfousuarioresponse() {
  // @@protoc_insertion_point(field_release:chat.Mensaje.solicitarInfoUsuarioResponse)
  _has_bits_[0] &= ~0x00000080u;
  ::chat::SolicitarInfoUsuarioResponse* temp = solicitarinfousuarioresponse_;
  solicitarinfousuarioresponse_ = nullptr;
  return temp;
}
inline ::chat::SolicitarInfoUsuarioResponse* Mensaje::_internal_mutable_solicitarinfousuarioresponse() {
  _has_bits_[0] |= 0x00000080u;
  if (solicitarinfousuarioresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::SolicitarInfoUsuarioResponse>(GetArenaNoVirtual());
    solicitarinfousuarioresponse_ = p;
  }
  return solicitarinfousuarioresponse_;
}
inline ::chat::SolicitarInfoUsuarioResponse* Mensaje::mutable_solicitarinfousuarioresponse() {
  // @@protoc_insertion_point(field_mutable:chat.Mensaje.solicitarInfoUsuarioResponse)
  return _internal_mutable_solicitarinfousuarioresponse();
}
inline void Mensaje::set_allocated_solicitarinfousuarioresponse(::chat::SolicitarInfoUsuarioResponse* solicitarinfousuarioresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete solicitarinfousuarioresponse_;
  }
  if (solicitarinfousuarioresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      solicitarinfousuarioresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solicitarinfousuarioresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  solicitarinfousuarioresponse_ = solicitarinfousuarioresponse;
  // @@protoc_insertion_point(field_set_allocated:chat.Mensaje.solicitarInfoUsuarioResponse)
}

// optional .chat.MensajePrivadoRequest mensajePrivadoRequest = 9;
inline bool Mensaje::_internal_has_mensajeprivadorequest() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || mensajeprivadorequest_ != nullptr);
  return value;
}
inline bool Mensaje::has_mensajeprivadorequest() const {
  return _internal_has_mensajeprivadorequest();
}
inline void Mensaje::clear_mensajeprivadorequest() {
  if (mensajeprivadorequest_ != nullptr) mensajeprivadorequest_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::chat::MensajePrivadoRequest& Mensaje::_internal_mensajeprivadorequest() const {
  const ::chat::MensajePrivadoRequest* p = mensajeprivadorequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::MensajePrivadoRequest*>(
      &::chat::_MensajePrivadoRequest_default_instance_);
}
inline const ::chat::MensajePrivadoRequest& Mensaje::mensajeprivadorequest() const {
  // @@protoc_insertion_point(field_get:chat.Mensaje.mensajePrivadoRequest)
  return _internal_mensajeprivadorequest();
}
inline ::chat::MensajePrivadoRequest* Mensaje::release_mensajeprivadorequest() {
  // @@protoc_insertion_point(field_release:chat.Mensaje.mensajePrivadoRequest)
  _has_bits_[0] &= ~0x00000100u;
  ::chat::MensajePrivadoRequest* temp = mensajeprivadorequest_;
  mensajeprivadorequest_ = nullptr;
  return temp;
}
inline ::chat::MensajePrivadoRequest* Mensaje::_internal_mutable_mensajeprivadorequest() {
  _has_bits_[0] |= 0x00000100u;
  if (mensajeprivadorequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::MensajePrivadoRequest>(GetArenaNoVirtual());
    mensajeprivadorequest_ = p;
  }
  return mensajeprivadorequest_;
}
inline ::chat::MensajePrivadoRequest* Mensaje::mutable_mensajeprivadorequest() {
  // @@protoc_insertion_point(field_mutable:chat.Mensaje.mensajePrivadoRequest)
  return _internal_mutable_mensajeprivadorequest();
}
inline void Mensaje::set_allocated_mensajeprivadorequest(::chat::MensajePrivadoRequest* mensajeprivadorequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mensajeprivadorequest_;
  }
  if (mensajeprivadorequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mensajeprivadorequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mensajeprivadorequest, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  mensajeprivadorequest_ = mensajeprivadorequest;
  // @@protoc_insertion_point(field_set_allocated:chat.Mensaje.mensajePrivadoRequest)
}

// optional .chat.MensajePrivadoResponse mensajePrivadoResponse = 10;
inline bool Mensaje::_internal_has_mensajeprivadoresponse() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || mensajeprivadoresponse_ != nullptr);
  return value;
}
inline bool Mensaje::has_mensajeprivadoresponse() const {
  return _internal_has_mensajeprivadoresponse();
}
inline void Mensaje::clear_mensajeprivadoresponse() {
  if (mensajeprivadoresponse_ != nullptr) mensajeprivadoresponse_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::chat::MensajePrivadoResponse& Mensaje::_internal_mensajeprivadoresponse() const {
  const ::chat::MensajePrivadoResponse* p = mensajeprivadoresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::MensajePrivadoResponse*>(
      &::chat::_MensajePrivadoResponse_default_instance_);
}
inline const ::chat::MensajePrivadoResponse& Mensaje::mensajeprivadoresponse() const {
  // @@protoc_insertion_point(field_get:chat.Mensaje.mensajePrivadoResponse)
  return _internal_mensajeprivadoresponse();
}
inline ::chat::MensajePrivadoResponse* Mensaje::release_mensajeprivadoresponse() {
  // @@protoc_insertion_point(field_release:chat.Mensaje.mensajePrivadoResponse)
  _has_bits_[0] &= ~0x00000200u;
  ::chat::MensajePrivadoResponse* temp = mensajeprivadoresponse_;
  mensajeprivadoresponse_ = nullptr;
  return temp;
}
inline ::chat::MensajePrivadoResponse* Mensaje::_internal_mutable_mensajeprivadoresponse() {
  _has_bits_[0] |= 0x00000200u;
  if (mensajeprivadoresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::MensajePrivadoResponse>(GetArenaNoVirtual());
    mensajeprivadoresponse_ = p;
  }
  return mensajeprivadoresponse_;
}
inline ::chat::MensajePrivadoResponse* Mensaje::mutable_mensajeprivadoresponse() {
  // @@protoc_insertion_point(field_mutable:chat.Mensaje.mensajePrivadoResponse)
  return _internal_mutable_mensajeprivadoresponse();
}
inline void Mensaje::set_allocated_mensajeprivadoresponse(::chat::MensajePrivadoResponse* mensajeprivadoresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mensajeprivadoresponse_;
  }
  if (mensajeprivadoresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mensajeprivadoresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mensajeprivadoresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  mensajeprivadoresponse_ = mensajeprivadoresponse;
  // @@protoc_insertion_point(field_set_allocated:chat.Mensaje.mensajePrivadoResponse)
}

// optional .chat.ErrorResponse errorResponse = 11;
inline bool Mensaje::_internal_has_errorresponse() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || errorresponse_ != nullptr);
  return value;
}
inline bool Mensaje::has_errorresponse() const {
  return _internal_has_errorresponse();
}
inline void Mensaje::clear_errorresponse() {
  if (errorresponse_ != nullptr) errorresponse_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::chat::ErrorResponse& Mensaje::_internal_errorresponse() const {
  const ::chat::ErrorResponse* p = errorresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::ErrorResponse*>(
      &::chat::_ErrorResponse_default_instance_);
}
inline const ::chat::ErrorResponse& Mensaje::errorresponse() const {
  // @@protoc_insertion_point(field_get:chat.Mensaje.errorResponse)
  return _internal_errorresponse();
}
inline ::chat::ErrorResponse* Mensaje::release_errorresponse() {
  // @@protoc_insertion_point(field_release:chat.Mensaje.errorResponse)
  _has_bits_[0] &= ~0x00000400u;
  ::chat::ErrorResponse* temp = errorresponse_;
  errorresponse_ = nullptr;
  return temp;
}
inline ::chat::ErrorResponse* Mensaje::_internal_mutable_errorresponse() {
  _has_bits_[0] |= 0x00000400u;
  if (errorresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::ErrorResponse>(GetArenaNoVirtual());
    errorresponse_ = p;
  }
  return errorresponse_;
}
inline ::chat::ErrorResponse* Mensaje::mutable_errorresponse() {
  // @@protoc_insertion_point(field_mutable:chat.Mensaje.errorResponse)
  return _internal_mutable_errorresponse();
}
inline void Mensaje::set_allocated_errorresponse(::chat::ErrorResponse* errorresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete errorresponse_;
  }
  if (errorresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      errorresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errorresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  errorresponse_ = errorresponse;
  // @@protoc_insertion_point(field_set_allocated:chat.Mensaje.errorResponse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mensaje_2eproto
