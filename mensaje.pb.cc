// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mensaje.proto

#include "mensaje.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastRequest_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastResponse_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CambioEstadoRequest_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorResponse_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MensajePrivadoRequest_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MensajePrivadoResponse_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MiInfoRequest_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SolicitarInfoUsuarioRequest_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SolicitarInfoUsuarioResponse_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsuarioConectado_mensaje_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsuariosConectadosResponse_mensaje_2eproto;
namespace chat {
class MiInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MiInfoRequest> _instance;
} _MiInfoRequest_default_instance_;
class BroadcastRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastRequest> _instance;
} _BroadcastRequest_default_instance_;
class BroadcastResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastResponse> _instance;
} _BroadcastResponse_default_instance_;
class CambioEstadoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CambioEstadoRequest> _instance;
} _CambioEstadoRequest_default_instance_;
class UsuarioConectadoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsuarioConectado> _instance;
} _UsuarioConectado_default_instance_;
class UsuariosConectadosResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsuariosConectadosResponse> _instance;
} _UsuariosConectadosResponse_default_instance_;
class SolicitarInfoUsuarioRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SolicitarInfoUsuarioRequest> _instance;
} _SolicitarInfoUsuarioRequest_default_instance_;
class SolicitarInfoUsuarioResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SolicitarInfoUsuarioResponse> _instance;
} _SolicitarInfoUsuarioResponse_default_instance_;
class MensajePrivadoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MensajePrivadoRequest> _instance;
} _MensajePrivadoRequest_default_instance_;
class MensajePrivadoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MensajePrivadoResponse> _instance;
} _MensajePrivadoResponse_default_instance_;
class ErrorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorResponse> _instance;
} _ErrorResponse_default_instance_;
class MensajeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mensaje> _instance;
} _Mensaje_default_instance_;
}  // namespace chat
static void InitDefaultsscc_info_BroadcastRequest_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_BroadcastRequest_default_instance_;
    new (ptr) ::chat::BroadcastRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::BroadcastRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastRequest_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BroadcastRequest_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_BroadcastResponse_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_BroadcastResponse_default_instance_;
    new (ptr) ::chat::BroadcastResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::BroadcastResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastResponse_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BroadcastResponse_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_CambioEstadoRequest_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_CambioEstadoRequest_default_instance_;
    new (ptr) ::chat::CambioEstadoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::CambioEstadoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CambioEstadoRequest_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CambioEstadoRequest_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_ErrorResponse_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ErrorResponse_default_instance_;
    new (ptr) ::chat::ErrorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ErrorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorResponse_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErrorResponse_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_Mensaje_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_Mensaje_default_instance_;
    new (ptr) ::chat::Mensaje();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::Mensaje::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Mensaje_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_Mensaje_mensaje_2eproto}, {
      &scc_info_MiInfoRequest_mensaje_2eproto.base,
      &scc_info_BroadcastRequest_mensaje_2eproto.base,
      &scc_info_BroadcastResponse_mensaje_2eproto.base,
      &scc_info_CambioEstadoRequest_mensaje_2eproto.base,
      &scc_info_UsuariosConectadosResponse_mensaje_2eproto.base,
      &scc_info_SolicitarInfoUsuarioRequest_mensaje_2eproto.base,
      &scc_info_SolicitarInfoUsuarioResponse_mensaje_2eproto.base,
      &scc_info_MensajePrivadoRequest_mensaje_2eproto.base,
      &scc_info_MensajePrivadoResponse_mensaje_2eproto.base,
      &scc_info_ErrorResponse_mensaje_2eproto.base,}};

static void InitDefaultsscc_info_MensajePrivadoRequest_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_MensajePrivadoRequest_default_instance_;
    new (ptr) ::chat::MensajePrivadoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::MensajePrivadoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MensajePrivadoRequest_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MensajePrivadoRequest_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_MensajePrivadoResponse_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_MensajePrivadoResponse_default_instance_;
    new (ptr) ::chat::MensajePrivadoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::MensajePrivadoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MensajePrivadoResponse_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MensajePrivadoResponse_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_MiInfoRequest_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_MiInfoRequest_default_instance_;
    new (ptr) ::chat::MiInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::MiInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MiInfoRequest_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MiInfoRequest_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_SolicitarInfoUsuarioRequest_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_SolicitarInfoUsuarioRequest_default_instance_;
    new (ptr) ::chat::SolicitarInfoUsuarioRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::SolicitarInfoUsuarioRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SolicitarInfoUsuarioRequest_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SolicitarInfoUsuarioRequest_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_SolicitarInfoUsuarioResponse_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_SolicitarInfoUsuarioResponse_default_instance_;
    new (ptr) ::chat::SolicitarInfoUsuarioResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::SolicitarInfoUsuarioResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SolicitarInfoUsuarioResponse_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SolicitarInfoUsuarioResponse_mensaje_2eproto}, {
      &scc_info_UsuarioConectado_mensaje_2eproto.base,}};

static void InitDefaultsscc_info_UsuarioConectado_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_UsuarioConectado_default_instance_;
    new (ptr) ::chat::UsuarioConectado();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::UsuarioConectado::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsuarioConectado_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsuarioConectado_mensaje_2eproto}, {}};

static void InitDefaultsscc_info_UsuariosConectadosResponse_mensaje_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_UsuariosConectadosResponse_default_instance_;
    new (ptr) ::chat::UsuariosConectadosResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::UsuariosConectadosResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsuariosConectadosResponse_mensaje_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsuariosConectadosResponse_mensaje_2eproto}, {
      &scc_info_UsuarioConectado_mensaje_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mensaje_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mensaje_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mensaje_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mensaje_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::chat::MiInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::MiInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::MiInfoRequest, username_),
  PROTOBUF_FIELD_OFFSET(::chat::MiInfoRequest, ip_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastRequest, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastResponse, message_),
  PROTOBUF_FIELD_OFFSET(::chat::BroadcastResponse, fromusername_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::chat::CambioEstadoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::CambioEstadoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::CambioEstadoRequest, nuevoestado_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::UsuarioConectado, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::UsuarioConectado, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::UsuarioConectado, username_),
  PROTOBUF_FIELD_OFFSET(::chat::UsuarioConectado, estado_),
  PROTOBUF_FIELD_OFFSET(::chat::UsuarioConectado, id_),
  PROTOBUF_FIELD_OFFSET(::chat::UsuarioConectado, ip_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::chat::UsuariosConectadosResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::UsuariosConectadosResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::UsuariosConectadosResponse, usuariosconectados_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::chat::SolicitarInfoUsuarioRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::SolicitarInfoUsuarioRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::SolicitarInfoUsuarioRequest, userid_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::SolicitarInfoUsuarioResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::SolicitarInfoUsuarioResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::SolicitarInfoUsuarioResponse, usuarioconectado_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::MensajePrivadoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::MensajePrivadoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::MensajePrivadoRequest, message_),
  PROTOBUF_FIELD_OFFSET(::chat::MensajePrivadoRequest, touserip_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::chat::MensajePrivadoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::MensajePrivadoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::MensajePrivadoResponse, message_),
  PROTOBUF_FIELD_OFFSET(::chat::MensajePrivadoResponse, fromusername_),
  PROTOBUF_FIELD_OFFSET(::chat::MensajePrivadoResponse, fromuserip_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::chat::ErrorResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ErrorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ErrorResponse, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::Mensaje, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::Mensaje, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::Mensaje, option_),
  PROTOBUF_FIELD_OFFSET(::chat::Mensaje, miinforeq_),
  PROTOBUF_FIELD_OFFSET(::chat::Mensaje, broadcastrequest_),
  PROTOBUF_FIELD_OFFSET(::chat::Mensaje, broadcastresponse_),
  PROTOBUF_FIELD_OFFSET(::chat::Mensaje, cambioestadorequest_),
  PROTOBUF_FIELD_OFFSET(::chat::Mensaje, usuariosconectadosresponse_),
  PROTOBUF_FIELD_OFFSET(::chat::Mensaje, solicitarinfousuariorequest_),
  PROTOBUF_FIELD_OFFSET(::chat::Mensaje, solicitarinfousuarioresponse_),
  PROTOBUF_FIELD_OFFSET(::chat::Mensaje, mensajeprivadorequest_),
  PROTOBUF_FIELD_OFFSET(::chat::Mensaje, mensajeprivadoresponse_),
  PROTOBUF_FIELD_OFFSET(::chat::Mensaje, errorresponse_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::chat::MiInfoRequest)},
  { 9, 15, sizeof(::chat::BroadcastRequest)},
  { 16, 23, sizeof(::chat::BroadcastResponse)},
  { 25, 31, sizeof(::chat::CambioEstadoRequest)},
  { 32, 41, sizeof(::chat::UsuarioConectado)},
  { 45, 51, sizeof(::chat::UsuariosConectadosResponse)},
  { 52, 58, sizeof(::chat::SolicitarInfoUsuarioRequest)},
  { 59, 65, sizeof(::chat::SolicitarInfoUsuarioResponse)},
  { 66, 73, sizeof(::chat::MensajePrivadoRequest)},
  { 75, 83, sizeof(::chat::MensajePrivadoResponse)},
  { 86, 92, sizeof(::chat::ErrorResponse)},
  { 93, 109, sizeof(::chat::Mensaje)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_MiInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_BroadcastRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_BroadcastResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_CambioEstadoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_UsuarioConectado_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_UsuariosConectadosResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_SolicitarInfoUsuarioRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_SolicitarInfoUsuarioResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_MensajePrivadoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_MensajePrivadoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ErrorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_Mensaje_default_instance_),
};

const char descriptor_table_protodef_mensaje_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmensaje.proto\022\004chat\"-\n\rMiInfoRequest\022\020"
  "\n\010username\030\001 \002(\t\022\n\n\002ip\030\002 \002(\t\"#\n\020Broadcas"
  "tRequest\022\017\n\007message\030\001 \002(\t\":\n\021BroadcastRe"
  "sponse\022\017\n\007message\030\001 \002(\t\022\024\n\014fromUsername\030"
  "\002 \002(\t\"*\n\023CambioEstadoRequest\022\023\n\013nuevoEst"
  "ado\030\001 \002(\t\"L\n\020UsuarioConectado\022\020\n\010usernam"
  "e\030\001 \002(\t\022\016\n\006estado\030\002 \002(\t\022\n\n\002id\030\003 \002(\t\022\n\n\002i"
  "p\030\004 \002(\t\"P\n\032UsuariosConectadosResponse\0222\n"
  "\022usuariosConectados\030\001 \003(\0132\026.chat.Usuario"
  "Conectado\"-\n\033SolicitarInfoUsuarioRequest"
  "\022\016\n\006userId\030\001 \002(\t\"P\n\034SolicitarInfoUsuario"
  "Response\0220\n\020usuarioConectado\030\001 \002(\0132\026.cha"
  "t.UsuarioConectado\":\n\025MensajePrivadoRequ"
  "est\022\017\n\007message\030\001 \002(\t\022\020\n\010toUserIp\030\002 \002(\t\"S"
  "\n\026MensajePrivadoResponse\022\017\n\007message\030\001 \002("
  "\t\022\024\n\014fromUsername\030\002 \002(\t\022\022\n\nfromUserIp\030\003 "
  "\002(\t\" \n\rErrorResponse\022\017\n\007message\030\001 \002(\t\"\335\004"
  "\n\007Mensaje\022\016\n\006option\030\001 \002(\t\022&\n\tmiInfoReq\030\002"
  " \001(\0132\023.chat.MiInfoRequest\0220\n\020broadcastRe"
  "quest\030\003 \001(\0132\026.chat.BroadcastRequest\0222\n\021b"
  "roadcastResponse\030\004 \001(\0132\027.chat.BroadcastR"
  "esponse\0226\n\023cambioEstadoRequest\030\005 \001(\0132\031.c"
  "hat.CambioEstadoRequest\022D\n\032usuariosConec"
  "tadosResponse\030\006 \001(\0132 .chat.UsuariosConec"
  "tadosResponse\022F\n\033solicitarInfoUsuarioReq"
  "uest\030\007 \001(\0132!.chat.SolicitarInfoUsuarioRe"
  "quest\022H\n\034solicitarInfoUsuarioResponse\030\010 "
  "\001(\0132\".chat.SolicitarInfoUsuarioResponse\022"
  ":\n\025mensajePrivadoRequest\030\t \001(\0132\033.chat.Me"
  "nsajePrivadoRequest\022<\n\026mensajePrivadoRes"
  "ponse\030\n \001(\0132\034.chat.MensajePrivadoRespons"
  "e\022*\n\rerrorResponse\030\013 \001(\0132\023.chat.ErrorRes"
  "ponse"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mensaje_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mensaje_2eproto_sccs[12] = {
  &scc_info_BroadcastRequest_mensaje_2eproto.base,
  &scc_info_BroadcastResponse_mensaje_2eproto.base,
  &scc_info_CambioEstadoRequest_mensaje_2eproto.base,
  &scc_info_ErrorResponse_mensaje_2eproto.base,
  &scc_info_Mensaje_mensaje_2eproto.base,
  &scc_info_MensajePrivadoRequest_mensaje_2eproto.base,
  &scc_info_MensajePrivadoResponse_mensaje_2eproto.base,
  &scc_info_MiInfoRequest_mensaje_2eproto.base,
  &scc_info_SolicitarInfoUsuarioRequest_mensaje_2eproto.base,
  &scc_info_SolicitarInfoUsuarioResponse_mensaje_2eproto.base,
  &scc_info_UsuarioConectado_mensaje_2eproto.base,
  &scc_info_UsuariosConectadosResponse_mensaje_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mensaje_2eproto_once;
static bool descriptor_table_mensaje_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mensaje_2eproto = {
  &descriptor_table_mensaje_2eproto_initialized, descriptor_table_protodef_mensaje_2eproto, "mensaje.proto", 1285,
  &descriptor_table_mensaje_2eproto_once, descriptor_table_mensaje_2eproto_sccs, descriptor_table_mensaje_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_mensaje_2eproto::offsets,
  file_level_metadata_mensaje_2eproto, 12, file_level_enum_descriptors_mensaje_2eproto, file_level_service_descriptors_mensaje_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mensaje_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mensaje_2eproto), true);
namespace chat {

// ===================================================================

void MiInfoRequest::InitAsDefaultInstance() {
}
class MiInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MiInfoRequest>()._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MiInfoRequest::MiInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MiInfoRequest)
}
MiInfoRequest::MiInfoRequest(const MiInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.MiInfoRequest)
}

void MiInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MiInfoRequest_mensaje_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MiInfoRequest::~MiInfoRequest() {
  // @@protoc_insertion_point(destructor:chat.MiInfoRequest)
  SharedDtor();
}

void MiInfoRequest::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MiInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MiInfoRequest& MiInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MiInfoRequest_mensaje_2eproto.base);
  return *internal_default_instance();
}


void MiInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MiInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MiInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.MiInfoRequest.username");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.MiInfoRequest.ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MiInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.MiInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.MiInfoRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // required string ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.MiInfoRequest.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.MiInfoRequest)
  return target;
}

size_t MiInfoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.MiInfoRequest)
  size_t total_size = 0;

  if (_internal_has_username()) {
    // required string username = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (_internal_has_ip()) {
    // required string ip = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  return total_size;
}
size_t MiInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MiInfoRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string username = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());

    // required string ip = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MiInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MiInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MiInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MiInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MiInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MiInfoRequest)
    MergeFrom(*source);
  }
}

void MiInfoRequest::MergeFrom(const MiInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MiInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
}

void MiInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MiInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiInfoRequest::CopyFrom(const MiInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MiInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MiInfoRequest::InternalSwap(MiInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MiInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastRequest::InitAsDefaultInstance() {
}
class BroadcastRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastRequest>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BroadcastRequest::BroadcastRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.BroadcastRequest)
}
BroadcastRequest::BroadcastRequest(const BroadcastRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.BroadcastRequest)
}

void BroadcastRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastRequest_mensaje_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BroadcastRequest::~BroadcastRequest() {
  // @@protoc_insertion_point(destructor:chat.BroadcastRequest)
  SharedDtor();
}

void BroadcastRequest::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BroadcastRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastRequest& BroadcastRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastRequest_mensaje_2eproto.base);
  return *internal_default_instance();
}


void BroadcastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.BroadcastRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BroadcastRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.BroadcastRequest.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.BroadcastRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.BroadcastRequest.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.BroadcastRequest)
  return target;
}

size_t BroadcastRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.BroadcastRequest)
  size_t total_size = 0;

  // required string message = 1;
  if (_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.BroadcastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.BroadcastRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.BroadcastRequest)
    MergeFrom(*source);
  }
}

void BroadcastRequest::MergeFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.BroadcastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _has_bits_[0] |= 0x00000001u;
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void BroadcastRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastRequest::CopyFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BroadcastRequest::InternalSwap(BroadcastRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastResponse::InitAsDefaultInstance() {
}
class BroadcastResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastResponse>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fromusername(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BroadcastResponse::BroadcastResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.BroadcastResponse)
}
BroadcastResponse::BroadcastResponse(const BroadcastResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  fromusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fromusername()) {
    fromusername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.BroadcastResponse)
}

void BroadcastResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastResponse_mensaje_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BroadcastResponse::~BroadcastResponse() {
  // @@protoc_insertion_point(destructor:chat.BroadcastResponse)
  SharedDtor();
}

void BroadcastResponse::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BroadcastResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastResponse& BroadcastResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastResponse_mensaje_2eproto.base);
  return *internal_default_instance();
}


void BroadcastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.BroadcastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      fromusername_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BroadcastResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.BroadcastResponse.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string fromUsername = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fromusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.BroadcastResponse.fromUsername");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.BroadcastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.BroadcastResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // required string fromUsername = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fromusername().data(), static_cast<int>(this->_internal_fromusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.BroadcastResponse.fromUsername");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fromusername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.BroadcastResponse)
  return target;
}

size_t BroadcastResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.BroadcastResponse)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_fromusername()) {
    // required string fromUsername = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromusername());
  }

  return total_size;
}
size_t BroadcastResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.BroadcastResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required string fromUsername = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromusername());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.BroadcastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.BroadcastResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.BroadcastResponse)
    MergeFrom(*source);
  }
}

void BroadcastResponse::MergeFrom(const BroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.BroadcastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      fromusername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
  }
}

void BroadcastResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.BroadcastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastResponse::CopyFrom(const BroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.BroadcastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BroadcastResponse::InternalSwap(BroadcastResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fromusername_.Swap(&other->fromusername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CambioEstadoRequest::InitAsDefaultInstance() {
}
class CambioEstadoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CambioEstadoRequest>()._has_bits_);
  static void set_has_nuevoestado(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CambioEstadoRequest::CambioEstadoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.CambioEstadoRequest)
}
CambioEstadoRequest::CambioEstadoRequest(const CambioEstadoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nuevoestado_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nuevoestado()) {
    nuevoestado_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nuevoestado_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.CambioEstadoRequest)
}

void CambioEstadoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CambioEstadoRequest_mensaje_2eproto.base);
  nuevoestado_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CambioEstadoRequest::~CambioEstadoRequest() {
  // @@protoc_insertion_point(destructor:chat.CambioEstadoRequest)
  SharedDtor();
}

void CambioEstadoRequest::SharedDtor() {
  nuevoestado_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CambioEstadoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CambioEstadoRequest& CambioEstadoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CambioEstadoRequest_mensaje_2eproto.base);
  return *internal_default_instance();
}


void CambioEstadoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.CambioEstadoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nuevoestado_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CambioEstadoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string nuevoEstado = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nuevoestado();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.CambioEstadoRequest.nuevoEstado");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CambioEstadoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.CambioEstadoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string nuevoEstado = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nuevoestado().data(), static_cast<int>(this->_internal_nuevoestado().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.CambioEstadoRequest.nuevoEstado");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nuevoestado(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.CambioEstadoRequest)
  return target;
}

size_t CambioEstadoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.CambioEstadoRequest)
  size_t total_size = 0;

  // required string nuevoEstado = 1;
  if (_internal_has_nuevoestado()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nuevoestado());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CambioEstadoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.CambioEstadoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CambioEstadoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CambioEstadoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.CambioEstadoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.CambioEstadoRequest)
    MergeFrom(*source);
  }
}

void CambioEstadoRequest::MergeFrom(const CambioEstadoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.CambioEstadoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nuevoestado()) {
    _has_bits_[0] |= 0x00000001u;
    nuevoestado_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nuevoestado_);
  }
}

void CambioEstadoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.CambioEstadoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CambioEstadoRequest::CopyFrom(const CambioEstadoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.CambioEstadoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CambioEstadoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CambioEstadoRequest::InternalSwap(CambioEstadoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nuevoestado_.Swap(&other->nuevoestado_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CambioEstadoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsuarioConectado::InitAsDefaultInstance() {
}
class UsuarioConectado::_Internal {
 public:
  using HasBits = decltype(std::declval<UsuarioConectado>()._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_estado(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

UsuarioConectado::UsuarioConectado()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.UsuarioConectado)
}
UsuarioConectado::UsuarioConectado(const UsuarioConectado& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  estado_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_estado()) {
    estado_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.estado_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.UsuarioConectado)
}

void UsuarioConectado::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsuarioConectado_mensaje_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  estado_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UsuarioConectado::~UsuarioConectado() {
  // @@protoc_insertion_point(destructor:chat.UsuarioConectado)
  SharedDtor();
}

void UsuarioConectado::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  estado_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UsuarioConectado::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsuarioConectado& UsuarioConectado::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsuarioConectado_mensaje_2eproto.base);
  return *internal_default_instance();
}


void UsuarioConectado::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.UsuarioConectado)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      estado_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      ip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsuarioConectado::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.UsuarioConectado.username");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string estado = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_estado();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.UsuarioConectado.estado");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.UsuarioConectado.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.UsuarioConectado.ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsuarioConectado::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.UsuarioConectado)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.UsuarioConectado.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // required string estado = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_estado().data(), static_cast<int>(this->_internal_estado().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.UsuarioConectado.estado");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_estado(), target);
  }

  // required string id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.UsuarioConectado.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // required string ip = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.UsuarioConectado.ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.UsuarioConectado)
  return target;
}

size_t UsuarioConectado::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.UsuarioConectado)
  size_t total_size = 0;

  if (_internal_has_username()) {
    // required string username = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (_internal_has_estado()) {
    // required string estado = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_estado());
  }

  if (_internal_has_id()) {
    // required string id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (_internal_has_ip()) {
    // required string ip = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  return total_size;
}
size_t UsuarioConectado::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.UsuarioConectado)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string username = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());

    // required string estado = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_estado());

    // required string id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());

    // required string ip = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsuarioConectado::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.UsuarioConectado)
  GOOGLE_DCHECK_NE(&from, this);
  const UsuarioConectado* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsuarioConectado>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.UsuarioConectado)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.UsuarioConectado)
    MergeFrom(*source);
  }
}

void UsuarioConectado::MergeFrom(const UsuarioConectado& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.UsuarioConectado)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      estado_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.estado_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
}

void UsuarioConectado::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.UsuarioConectado)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsuarioConectado::CopyFrom(const UsuarioConectado& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.UsuarioConectado)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsuarioConectado::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void UsuarioConectado::InternalSwap(UsuarioConectado* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  estado_.Swap(&other->estado_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UsuarioConectado::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsuariosConectadosResponse::InitAsDefaultInstance() {
}
class UsuariosConectadosResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UsuariosConectadosResponse>()._has_bits_);
};

UsuariosConectadosResponse::UsuariosConectadosResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.UsuariosConectadosResponse)
}
UsuariosConectadosResponse::UsuariosConectadosResponse(const UsuariosConectadosResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      usuariosconectados_(from.usuariosconectados_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chat.UsuariosConectadosResponse)
}

void UsuariosConectadosResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsuariosConectadosResponse_mensaje_2eproto.base);
}

UsuariosConectadosResponse::~UsuariosConectadosResponse() {
  // @@protoc_insertion_point(destructor:chat.UsuariosConectadosResponse)
  SharedDtor();
}

void UsuariosConectadosResponse::SharedDtor() {
}

void UsuariosConectadosResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsuariosConectadosResponse& UsuariosConectadosResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsuariosConectadosResponse_mensaje_2eproto.base);
  return *internal_default_instance();
}


void UsuariosConectadosResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.UsuariosConectadosResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usuariosconectados_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsuariosConectadosResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .chat.UsuarioConectado usuariosConectados = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usuariosconectados(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsuariosConectadosResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.UsuariosConectadosResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chat.UsuarioConectado usuariosConectados = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usuariosconectados_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_usuariosconectados(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.UsuariosConectadosResponse)
  return target;
}

size_t UsuariosConectadosResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.UsuariosConectadosResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chat.UsuarioConectado usuariosConectados = 1;
  total_size += 1UL * this->_internal_usuariosconectados_size();
  for (const auto& msg : this->usuariosconectados_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsuariosConectadosResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.UsuariosConectadosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UsuariosConectadosResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsuariosConectadosResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.UsuariosConectadosResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.UsuariosConectadosResponse)
    MergeFrom(*source);
  }
}

void UsuariosConectadosResponse::MergeFrom(const UsuariosConectadosResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.UsuariosConectadosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usuariosconectados_.MergeFrom(from.usuariosconectados_);
}

void UsuariosConectadosResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.UsuariosConectadosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsuariosConectadosResponse::CopyFrom(const UsuariosConectadosResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.UsuariosConectadosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsuariosConectadosResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(usuariosconectados_)) return false;
  return true;
}

void UsuariosConectadosResponse::InternalSwap(UsuariosConectadosResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  usuariosconectados_.InternalSwap(&other->usuariosconectados_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsuariosConectadosResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SolicitarInfoUsuarioRequest::InitAsDefaultInstance() {
}
class SolicitarInfoUsuarioRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SolicitarInfoUsuarioRequest>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SolicitarInfoUsuarioRequest::SolicitarInfoUsuarioRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.SolicitarInfoUsuarioRequest)
}
SolicitarInfoUsuarioRequest::SolicitarInfoUsuarioRequest(const SolicitarInfoUsuarioRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userid()) {
    userid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.SolicitarInfoUsuarioRequest)
}

void SolicitarInfoUsuarioRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SolicitarInfoUsuarioRequest_mensaje_2eproto.base);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SolicitarInfoUsuarioRequest::~SolicitarInfoUsuarioRequest() {
  // @@protoc_insertion_point(destructor:chat.SolicitarInfoUsuarioRequest)
  SharedDtor();
}

void SolicitarInfoUsuarioRequest::SharedDtor() {
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SolicitarInfoUsuarioRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SolicitarInfoUsuarioRequest& SolicitarInfoUsuarioRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SolicitarInfoUsuarioRequest_mensaje_2eproto.base);
  return *internal_default_instance();
}


void SolicitarInfoUsuarioRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.SolicitarInfoUsuarioRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SolicitarInfoUsuarioRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.SolicitarInfoUsuarioRequest.userId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolicitarInfoUsuarioRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.SolicitarInfoUsuarioRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.SolicitarInfoUsuarioRequest.userId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.SolicitarInfoUsuarioRequest)
  return target;
}

size_t SolicitarInfoUsuarioRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.SolicitarInfoUsuarioRequest)
  size_t total_size = 0;

  // required string userId = 1;
  if (_internal_has_userid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolicitarInfoUsuarioRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.SolicitarInfoUsuarioRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SolicitarInfoUsuarioRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolicitarInfoUsuarioRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.SolicitarInfoUsuarioRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.SolicitarInfoUsuarioRequest)
    MergeFrom(*source);
  }
}

void SolicitarInfoUsuarioRequest::MergeFrom(const SolicitarInfoUsuarioRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.SolicitarInfoUsuarioRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userid()) {
    _has_bits_[0] |= 0x00000001u;
    userid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void SolicitarInfoUsuarioRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.SolicitarInfoUsuarioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolicitarInfoUsuarioRequest::CopyFrom(const SolicitarInfoUsuarioRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.SolicitarInfoUsuarioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolicitarInfoUsuarioRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SolicitarInfoUsuarioRequest::InternalSwap(SolicitarInfoUsuarioRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  userid_.Swap(&other->userid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SolicitarInfoUsuarioRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SolicitarInfoUsuarioResponse::InitAsDefaultInstance() {
  ::chat::_SolicitarInfoUsuarioResponse_default_instance_._instance.get_mutable()->usuarioconectado_ = const_cast< ::chat::UsuarioConectado*>(
      ::chat::UsuarioConectado::internal_default_instance());
}
class SolicitarInfoUsuarioResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SolicitarInfoUsuarioResponse>()._has_bits_);
  static const ::chat::UsuarioConectado& usuarioconectado(const SolicitarInfoUsuarioResponse* msg);
  static void set_has_usuarioconectado(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::chat::UsuarioConectado&
SolicitarInfoUsuarioResponse::_Internal::usuarioconectado(const SolicitarInfoUsuarioResponse* msg) {
  return *msg->usuarioconectado_;
}
SolicitarInfoUsuarioResponse::SolicitarInfoUsuarioResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.SolicitarInfoUsuarioResponse)
}
SolicitarInfoUsuarioResponse::SolicitarInfoUsuarioResponse(const SolicitarInfoUsuarioResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_usuarioconectado()) {
    usuarioconectado_ = new ::chat::UsuarioConectado(*from.usuarioconectado_);
  } else {
    usuarioconectado_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:chat.SolicitarInfoUsuarioResponse)
}

void SolicitarInfoUsuarioResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SolicitarInfoUsuarioResponse_mensaje_2eproto.base);
  usuarioconectado_ = nullptr;
}

SolicitarInfoUsuarioResponse::~SolicitarInfoUsuarioResponse() {
  // @@protoc_insertion_point(destructor:chat.SolicitarInfoUsuarioResponse)
  SharedDtor();
}

void SolicitarInfoUsuarioResponse::SharedDtor() {
  if (this != internal_default_instance()) delete usuarioconectado_;
}

void SolicitarInfoUsuarioResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SolicitarInfoUsuarioResponse& SolicitarInfoUsuarioResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SolicitarInfoUsuarioResponse_mensaje_2eproto.base);
  return *internal_default_instance();
}


void SolicitarInfoUsuarioResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.SolicitarInfoUsuarioResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(usuarioconectado_ != nullptr);
    usuarioconectado_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SolicitarInfoUsuarioResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .chat.UsuarioConectado usuarioConectado = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_usuarioconectado(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolicitarInfoUsuarioResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.SolicitarInfoUsuarioResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .chat.UsuarioConectado usuarioConectado = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::usuarioconectado(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.SolicitarInfoUsuarioResponse)
  return target;
}

size_t SolicitarInfoUsuarioResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.SolicitarInfoUsuarioResponse)
  size_t total_size = 0;

  // required .chat.UsuarioConectado usuarioConectado = 1;
  if (_internal_has_usuarioconectado()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *usuarioconectado_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolicitarInfoUsuarioResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.SolicitarInfoUsuarioResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SolicitarInfoUsuarioResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolicitarInfoUsuarioResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.SolicitarInfoUsuarioResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.SolicitarInfoUsuarioResponse)
    MergeFrom(*source);
  }
}

void SolicitarInfoUsuarioResponse::MergeFrom(const SolicitarInfoUsuarioResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.SolicitarInfoUsuarioResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_usuarioconectado()) {
    _internal_mutable_usuarioconectado()->::chat::UsuarioConectado::MergeFrom(from._internal_usuarioconectado());
  }
}

void SolicitarInfoUsuarioResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.SolicitarInfoUsuarioResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolicitarInfoUsuarioResponse::CopyFrom(const SolicitarInfoUsuarioResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.SolicitarInfoUsuarioResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolicitarInfoUsuarioResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_usuarioconectado()) {
    if (!usuarioconectado_->IsInitialized()) return false;
  }
  return true;
}

void SolicitarInfoUsuarioResponse::InternalSwap(SolicitarInfoUsuarioResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(usuarioconectado_, other->usuarioconectado_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SolicitarInfoUsuarioResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MensajePrivadoRequest::InitAsDefaultInstance() {
}
class MensajePrivadoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MensajePrivadoRequest>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_touserip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MensajePrivadoRequest::MensajePrivadoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MensajePrivadoRequest)
}
MensajePrivadoRequest::MensajePrivadoRequest(const MensajePrivadoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  touserip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_touserip()) {
    touserip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.touserip_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.MensajePrivadoRequest)
}

void MensajePrivadoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MensajePrivadoRequest_mensaje_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  touserip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MensajePrivadoRequest::~MensajePrivadoRequest() {
  // @@protoc_insertion_point(destructor:chat.MensajePrivadoRequest)
  SharedDtor();
}

void MensajePrivadoRequest::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  touserip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MensajePrivadoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MensajePrivadoRequest& MensajePrivadoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MensajePrivadoRequest_mensaje_2eproto.base);
  return *internal_default_instance();
}


void MensajePrivadoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MensajePrivadoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      touserip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MensajePrivadoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.MensajePrivadoRequest.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string toUserIp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_touserip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.MensajePrivadoRequest.toUserIp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MensajePrivadoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.MensajePrivadoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.MensajePrivadoRequest.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // required string toUserIp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_touserip().data(), static_cast<int>(this->_internal_touserip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.MensajePrivadoRequest.toUserIp");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_touserip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.MensajePrivadoRequest)
  return target;
}

size_t MensajePrivadoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.MensajePrivadoRequest)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_touserip()) {
    // required string toUserIp = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_touserip());
  }

  return total_size;
}
size_t MensajePrivadoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MensajePrivadoRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required string toUserIp = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_touserip());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MensajePrivadoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MensajePrivadoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MensajePrivadoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MensajePrivadoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MensajePrivadoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MensajePrivadoRequest)
    MergeFrom(*source);
  }
}

void MensajePrivadoRequest::MergeFrom(const MensajePrivadoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MensajePrivadoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      touserip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.touserip_);
    }
  }
}

void MensajePrivadoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MensajePrivadoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MensajePrivadoRequest::CopyFrom(const MensajePrivadoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MensajePrivadoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MensajePrivadoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MensajePrivadoRequest::InternalSwap(MensajePrivadoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  touserip_.Swap(&other->touserip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MensajePrivadoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MensajePrivadoResponse::InitAsDefaultInstance() {
}
class MensajePrivadoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MensajePrivadoResponse>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fromusername(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fromuserip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MensajePrivadoResponse::MensajePrivadoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MensajePrivadoResponse)
}
MensajePrivadoResponse::MensajePrivadoResponse(const MensajePrivadoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  fromusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fromusername()) {
    fromusername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  fromuserip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fromuserip()) {
    fromuserip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fromuserip_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.MensajePrivadoResponse)
}

void MensajePrivadoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MensajePrivadoResponse_mensaje_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromuserip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MensajePrivadoResponse::~MensajePrivadoResponse() {
  // @@protoc_insertion_point(destructor:chat.MensajePrivadoResponse)
  SharedDtor();
}

void MensajePrivadoResponse::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromuserip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MensajePrivadoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MensajePrivadoResponse& MensajePrivadoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MensajePrivadoResponse_mensaje_2eproto.base);
  return *internal_default_instance();
}


void MensajePrivadoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MensajePrivadoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      fromusername_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      fromuserip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MensajePrivadoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.MensajePrivadoResponse.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string fromUsername = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fromusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.MensajePrivadoResponse.fromUsername");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string fromUserIp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fromuserip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.MensajePrivadoResponse.fromUserIp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MensajePrivadoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.MensajePrivadoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.MensajePrivadoResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // required string fromUsername = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fromusername().data(), static_cast<int>(this->_internal_fromusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.MensajePrivadoResponse.fromUsername");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fromusername(), target);
  }

  // required string fromUserIp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fromuserip().data(), static_cast<int>(this->_internal_fromuserip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.MensajePrivadoResponse.fromUserIp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fromuserip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.MensajePrivadoResponse)
  return target;
}

size_t MensajePrivadoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.MensajePrivadoResponse)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_fromusername()) {
    // required string fromUsername = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromusername());
  }

  if (_internal_has_fromuserip()) {
    // required string fromUserIp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromuserip());
  }

  return total_size;
}
size_t MensajePrivadoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MensajePrivadoResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required string fromUsername = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromusername());

    // required string fromUserIp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromuserip());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MensajePrivadoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MensajePrivadoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MensajePrivadoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MensajePrivadoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MensajePrivadoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MensajePrivadoResponse)
    MergeFrom(*source);
  }
}

void MensajePrivadoResponse::MergeFrom(const MensajePrivadoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MensajePrivadoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      fromusername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      fromuserip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fromuserip_);
    }
  }
}

void MensajePrivadoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MensajePrivadoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MensajePrivadoResponse::CopyFrom(const MensajePrivadoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MensajePrivadoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MensajePrivadoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void MensajePrivadoResponse::InternalSwap(MensajePrivadoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fromusername_.Swap(&other->fromusername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fromuserip_.Swap(&other->fromuserip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MensajePrivadoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ErrorResponse::InitAsDefaultInstance() {
}
class ErrorResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorResponse>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ErrorResponse::ErrorResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ErrorResponse)
}
ErrorResponse::ErrorResponse(const ErrorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.ErrorResponse)
}

void ErrorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorResponse_mensaje_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ErrorResponse::~ErrorResponse() {
  // @@protoc_insertion_point(destructor:chat.ErrorResponse)
  SharedDtor();
}

void ErrorResponse::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorResponse& ErrorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorResponse_mensaje_2eproto.base);
  return *internal_default_instance();
}


void ErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ErrorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ErrorResponse.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ErrorResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ErrorResponse)
  return target;
}

size_t ErrorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ErrorResponse)
  size_t total_size = 0;

  // required string message = 1;
  if (_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ErrorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ErrorResponse)
    MergeFrom(*source);
  }
}

void ErrorResponse::MergeFrom(const ErrorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _has_bits_[0] |= 0x00000001u;
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void ErrorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorResponse::CopyFrom(const ErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ErrorResponse::InternalSwap(ErrorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mensaje::InitAsDefaultInstance() {
  ::chat::_Mensaje_default_instance_._instance.get_mutable()->miinforeq_ = const_cast< ::chat::MiInfoRequest*>(
      ::chat::MiInfoRequest::internal_default_instance());
  ::chat::_Mensaje_default_instance_._instance.get_mutable()->broadcastrequest_ = const_cast< ::chat::BroadcastRequest*>(
      ::chat::BroadcastRequest::internal_default_instance());
  ::chat::_Mensaje_default_instance_._instance.get_mutable()->broadcastresponse_ = const_cast< ::chat::BroadcastResponse*>(
      ::chat::BroadcastResponse::internal_default_instance());
  ::chat::_Mensaje_default_instance_._instance.get_mutable()->cambioestadorequest_ = const_cast< ::chat::CambioEstadoRequest*>(
      ::chat::CambioEstadoRequest::internal_default_instance());
  ::chat::_Mensaje_default_instance_._instance.get_mutable()->usuariosconectadosresponse_ = const_cast< ::chat::UsuariosConectadosResponse*>(
      ::chat::UsuariosConectadosResponse::internal_default_instance());
  ::chat::_Mensaje_default_instance_._instance.get_mutable()->solicitarinfousuariorequest_ = const_cast< ::chat::SolicitarInfoUsuarioRequest*>(
      ::chat::SolicitarInfoUsuarioRequest::internal_default_instance());
  ::chat::_Mensaje_default_instance_._instance.get_mutable()->solicitarinfousuarioresponse_ = const_cast< ::chat::SolicitarInfoUsuarioResponse*>(
      ::chat::SolicitarInfoUsuarioResponse::internal_default_instance());
  ::chat::_Mensaje_default_instance_._instance.get_mutable()->mensajeprivadorequest_ = const_cast< ::chat::MensajePrivadoRequest*>(
      ::chat::MensajePrivadoRequest::internal_default_instance());
  ::chat::_Mensaje_default_instance_._instance.get_mutable()->mensajeprivadoresponse_ = const_cast< ::chat::MensajePrivadoResponse*>(
      ::chat::MensajePrivadoResponse::internal_default_instance());
  ::chat::_Mensaje_default_instance_._instance.get_mutable()->errorresponse_ = const_cast< ::chat::ErrorResponse*>(
      ::chat::ErrorResponse::internal_default_instance());
}
class Mensaje::_Internal {
 public:
  using HasBits = decltype(std::declval<Mensaje>()._has_bits_);
  static void set_has_option(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::chat::MiInfoRequest& miinforeq(const Mensaje* msg);
  static void set_has_miinforeq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::chat::BroadcastRequest& broadcastrequest(const Mensaje* msg);
  static void set_has_broadcastrequest(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::chat::BroadcastResponse& broadcastresponse(const Mensaje* msg);
  static void set_has_broadcastresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::chat::CambioEstadoRequest& cambioestadorequest(const Mensaje* msg);
  static void set_has_cambioestadorequest(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::chat::UsuariosConectadosResponse& usuariosconectadosresponse(const Mensaje* msg);
  static void set_has_usuariosconectadosresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::chat::SolicitarInfoUsuarioRequest& solicitarinfousuariorequest(const Mensaje* msg);
  static void set_has_solicitarinfousuariorequest(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::chat::SolicitarInfoUsuarioResponse& solicitarinfousuarioresponse(const Mensaje* msg);
  static void set_has_solicitarinfousuarioresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::chat::MensajePrivadoRequest& mensajeprivadorequest(const Mensaje* msg);
  static void set_has_mensajeprivadorequest(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::chat::MensajePrivadoResponse& mensajeprivadoresponse(const Mensaje* msg);
  static void set_has_mensajeprivadoresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::chat::ErrorResponse& errorresponse(const Mensaje* msg);
  static void set_has_errorresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::chat::MiInfoRequest&
Mensaje::_Internal::miinforeq(const Mensaje* msg) {
  return *msg->miinforeq_;
}
const ::chat::BroadcastRequest&
Mensaje::_Internal::broadcastrequest(const Mensaje* msg) {
  return *msg->broadcastrequest_;
}
const ::chat::BroadcastResponse&
Mensaje::_Internal::broadcastresponse(const Mensaje* msg) {
  return *msg->broadcastresponse_;
}
const ::chat::CambioEstadoRequest&
Mensaje::_Internal::cambioestadorequest(const Mensaje* msg) {
  return *msg->cambioestadorequest_;
}
const ::chat::UsuariosConectadosResponse&
Mensaje::_Internal::usuariosconectadosresponse(const Mensaje* msg) {
  return *msg->usuariosconectadosresponse_;
}
const ::chat::SolicitarInfoUsuarioRequest&
Mensaje::_Internal::solicitarinfousuariorequest(const Mensaje* msg) {
  return *msg->solicitarinfousuariorequest_;
}
const ::chat::SolicitarInfoUsuarioResponse&
Mensaje::_Internal::solicitarinfousuarioresponse(const Mensaje* msg) {
  return *msg->solicitarinfousuarioresponse_;
}
const ::chat::MensajePrivadoRequest&
Mensaje::_Internal::mensajeprivadorequest(const Mensaje* msg) {
  return *msg->mensajeprivadorequest_;
}
const ::chat::MensajePrivadoResponse&
Mensaje::_Internal::mensajeprivadoresponse(const Mensaje* msg) {
  return *msg->mensajeprivadoresponse_;
}
const ::chat::ErrorResponse&
Mensaje::_Internal::errorresponse(const Mensaje* msg) {
  return *msg->errorresponse_;
}
Mensaje::Mensaje()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Mensaje)
}
Mensaje::Mensaje(const Mensaje& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  option_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_option()) {
    option_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.option_);
  }
  if (from._internal_has_miinforeq()) {
    miinforeq_ = new ::chat::MiInfoRequest(*from.miinforeq_);
  } else {
    miinforeq_ = nullptr;
  }
  if (from._internal_has_broadcastrequest()) {
    broadcastrequest_ = new ::chat::BroadcastRequest(*from.broadcastrequest_);
  } else {
    broadcastrequest_ = nullptr;
  }
  if (from._internal_has_broadcastresponse()) {
    broadcastresponse_ = new ::chat::BroadcastResponse(*from.broadcastresponse_);
  } else {
    broadcastresponse_ = nullptr;
  }
  if (from._internal_has_cambioestadorequest()) {
    cambioestadorequest_ = new ::chat::CambioEstadoRequest(*from.cambioestadorequest_);
  } else {
    cambioestadorequest_ = nullptr;
  }
  if (from._internal_has_usuariosconectadosresponse()) {
    usuariosconectadosresponse_ = new ::chat::UsuariosConectadosResponse(*from.usuariosconectadosresponse_);
  } else {
    usuariosconectadosresponse_ = nullptr;
  }
  if (from._internal_has_solicitarinfousuariorequest()) {
    solicitarinfousuariorequest_ = new ::chat::SolicitarInfoUsuarioRequest(*from.solicitarinfousuariorequest_);
  } else {
    solicitarinfousuariorequest_ = nullptr;
  }
  if (from._internal_has_solicitarinfousuarioresponse()) {
    solicitarinfousuarioresponse_ = new ::chat::SolicitarInfoUsuarioResponse(*from.solicitarinfousuarioresponse_);
  } else {
    solicitarinfousuarioresponse_ = nullptr;
  }
  if (from._internal_has_mensajeprivadorequest()) {
    mensajeprivadorequest_ = new ::chat::MensajePrivadoRequest(*from.mensajeprivadorequest_);
  } else {
    mensajeprivadorequest_ = nullptr;
  }
  if (from._internal_has_mensajeprivadoresponse()) {
    mensajeprivadoresponse_ = new ::chat::MensajePrivadoResponse(*from.mensajeprivadoresponse_);
  } else {
    mensajeprivadoresponse_ = nullptr;
  }
  if (from._internal_has_errorresponse()) {
    errorresponse_ = new ::chat::ErrorResponse(*from.errorresponse_);
  } else {
    errorresponse_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:chat.Mensaje)
}

void Mensaje::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mensaje_mensaje_2eproto.base);
  option_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&miinforeq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorresponse_) -
      reinterpret_cast<char*>(&miinforeq_)) + sizeof(errorresponse_));
}

Mensaje::~Mensaje() {
  // @@protoc_insertion_point(destructor:chat.Mensaje)
  SharedDtor();
}

void Mensaje::SharedDtor() {
  option_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete miinforeq_;
  if (this != internal_default_instance()) delete broadcastrequest_;
  if (this != internal_default_instance()) delete broadcastresponse_;
  if (this != internal_default_instance()) delete cambioestadorequest_;
  if (this != internal_default_instance()) delete usuariosconectadosresponse_;
  if (this != internal_default_instance()) delete solicitarinfousuariorequest_;
  if (this != internal_default_instance()) delete solicitarinfousuarioresponse_;
  if (this != internal_default_instance()) delete mensajeprivadorequest_;
  if (this != internal_default_instance()) delete mensajeprivadoresponse_;
  if (this != internal_default_instance()) delete errorresponse_;
}

void Mensaje::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mensaje& Mensaje::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mensaje_mensaje_2eproto.base);
  return *internal_default_instance();
}


void Mensaje::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Mensaje)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      option_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(miinforeq_ != nullptr);
      miinforeq_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(broadcastrequest_ != nullptr);
      broadcastrequest_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(broadcastresponse_ != nullptr);
      broadcastresponse_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(cambioestadorequest_ != nullptr);
      cambioestadorequest_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(usuariosconectadosresponse_ != nullptr);
      usuariosconectadosresponse_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(solicitarinfousuariorequest_ != nullptr);
      solicitarinfousuariorequest_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(solicitarinfousuarioresponse_ != nullptr);
      solicitarinfousuarioresponse_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(mensajeprivadorequest_ != nullptr);
      mensajeprivadorequest_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(mensajeprivadoresponse_ != nullptr);
      mensajeprivadoresponse_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(errorresponse_ != nullptr);
      errorresponse_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Mensaje::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_option();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.Mensaje.option");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.MiInfoRequest miInfoReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_miinforeq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.BroadcastRequest broadcastRequest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcastrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.BroadcastResponse broadcastResponse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcastresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.CambioEstadoRequest cambioEstadoRequest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cambioestadorequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.UsuariosConectadosResponse usuariosConectadosResponse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_usuariosconectadosresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.SolicitarInfoUsuarioRequest solicitarInfoUsuarioRequest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_solicitarinfousuariorequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.SolicitarInfoUsuarioResponse solicitarInfoUsuarioResponse = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_solicitarinfousuarioresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.MensajePrivadoRequest mensajePrivadoRequest = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mensajeprivadorequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.MensajePrivadoResponse mensajePrivadoResponse = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mensajeprivadoresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chat.ErrorResponse errorResponse = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_errorresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mensaje::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.Mensaje)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string option = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_option().data(), static_cast<int>(this->_internal_option().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.Mensaje.option");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_option(), target);
  }

  // optional .chat.MiInfoRequest miInfoReq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::miinforeq(this), target, stream);
  }

  // optional .chat.BroadcastRequest broadcastRequest = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::broadcastrequest(this), target, stream);
  }

  // optional .chat.BroadcastResponse broadcastResponse = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::broadcastresponse(this), target, stream);
  }

  // optional .chat.CambioEstadoRequest cambioEstadoRequest = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cambioestadorequest(this), target, stream);
  }

  // optional .chat.UsuariosConectadosResponse usuariosConectadosResponse = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::usuariosconectadosresponse(this), target, stream);
  }

  // optional .chat.SolicitarInfoUsuarioRequest solicitarInfoUsuarioRequest = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::solicitarinfousuariorequest(this), target, stream);
  }

  // optional .chat.SolicitarInfoUsuarioResponse solicitarInfoUsuarioResponse = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::solicitarinfousuarioresponse(this), target, stream);
  }

  // optional .chat.MensajePrivadoRequest mensajePrivadoRequest = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::mensajeprivadorequest(this), target, stream);
  }

  // optional .chat.MensajePrivadoResponse mensajePrivadoResponse = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::mensajeprivadoresponse(this), target, stream);
  }

  // optional .chat.ErrorResponse errorResponse = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::errorresponse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.Mensaje)
  return target;
}

size_t Mensaje::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Mensaje)
  size_t total_size = 0;

  // required string option = 1;
  if (_internal_has_option()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_option());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .chat.MiInfoRequest miInfoReq = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *miinforeq_);
    }

    // optional .chat.BroadcastRequest broadcastRequest = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcastrequest_);
    }

    // optional .chat.BroadcastResponse broadcastResponse = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcastresponse_);
    }

    // optional .chat.CambioEstadoRequest cambioEstadoRequest = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cambioestadorequest_);
    }

    // optional .chat.UsuariosConectadosResponse usuariosConectadosResponse = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *usuariosconectadosresponse_);
    }

    // optional .chat.SolicitarInfoUsuarioRequest solicitarInfoUsuarioRequest = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *solicitarinfousuariorequest_);
    }

    // optional .chat.SolicitarInfoUsuarioResponse solicitarInfoUsuarioResponse = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *solicitarinfousuarioresponse_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .chat.MensajePrivadoRequest mensajePrivadoRequest = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mensajeprivadorequest_);
    }

    // optional .chat.MensajePrivadoResponse mensajePrivadoResponse = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mensajeprivadoresponse_);
    }

    // optional .chat.ErrorResponse errorResponse = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *errorresponse_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mensaje::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Mensaje)
  GOOGLE_DCHECK_NE(&from, this);
  const Mensaje* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mensaje>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Mensaje)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Mensaje)
    MergeFrom(*source);
  }
}

void Mensaje::MergeFrom(const Mensaje& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Mensaje)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      option_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.option_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_miinforeq()->::chat::MiInfoRequest::MergeFrom(from._internal_miinforeq());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_broadcastrequest()->::chat::BroadcastRequest::MergeFrom(from._internal_broadcastrequest());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_broadcastresponse()->::chat::BroadcastResponse::MergeFrom(from._internal_broadcastresponse());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_cambioestadorequest()->::chat::CambioEstadoRequest::MergeFrom(from._internal_cambioestadorequest());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_usuariosconectadosresponse()->::chat::UsuariosConectadosResponse::MergeFrom(from._internal_usuariosconectadosresponse());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_solicitarinfousuariorequest()->::chat::SolicitarInfoUsuarioRequest::MergeFrom(from._internal_solicitarinfousuariorequest());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_solicitarinfousuarioresponse()->::chat::SolicitarInfoUsuarioResponse::MergeFrom(from._internal_solicitarinfousuarioresponse());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_mensajeprivadorequest()->::chat::MensajePrivadoRequest::MergeFrom(from._internal_mensajeprivadorequest());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_mensajeprivadoresponse()->::chat::MensajePrivadoResponse::MergeFrom(from._internal_mensajeprivadoresponse());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_errorresponse()->::chat::ErrorResponse::MergeFrom(from._internal_errorresponse());
    }
  }
}

void Mensaje::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Mensaje)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mensaje::CopyFrom(const Mensaje& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Mensaje)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mensaje::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_miinforeq()) {
    if (!miinforeq_->IsInitialized()) return false;
  }
  if (_internal_has_broadcastrequest()) {
    if (!broadcastrequest_->IsInitialized()) return false;
  }
  if (_internal_has_broadcastresponse()) {
    if (!broadcastresponse_->IsInitialized()) return false;
  }
  if (_internal_has_cambioestadorequest()) {
    if (!cambioestadorequest_->IsInitialized()) return false;
  }
  if (_internal_has_usuariosconectadosresponse()) {
    if (!usuariosconectadosresponse_->IsInitialized()) return false;
  }
  if (_internal_has_solicitarinfousuariorequest()) {
    if (!solicitarinfousuariorequest_->IsInitialized()) return false;
  }
  if (_internal_has_solicitarinfousuarioresponse()) {
    if (!solicitarinfousuarioresponse_->IsInitialized()) return false;
  }
  if (_internal_has_mensajeprivadorequest()) {
    if (!mensajeprivadorequest_->IsInitialized()) return false;
  }
  if (_internal_has_mensajeprivadoresponse()) {
    if (!mensajeprivadoresponse_->IsInitialized()) return false;
  }
  if (_internal_has_errorresponse()) {
    if (!errorresponse_->IsInitialized()) return false;
  }
  return true;
}

void Mensaje::InternalSwap(Mensaje* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  option_.Swap(&other->option_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(miinforeq_, other->miinforeq_);
  swap(broadcastrequest_, other->broadcastrequest_);
  swap(broadcastresponse_, other->broadcastresponse_);
  swap(cambioestadorequest_, other->cambioestadorequest_);
  swap(usuariosconectadosresponse_, other->usuariosconectadosresponse_);
  swap(solicitarinfousuariorequest_, other->solicitarinfousuariorequest_);
  swap(solicitarinfousuarioresponse_, other->solicitarinfousuarioresponse_);
  swap(mensajeprivadorequest_, other->mensajeprivadorequest_);
  swap(mensajeprivadoresponse_, other->mensajeprivadoresponse_);
  swap(errorresponse_, other->errorresponse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mensaje::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chat::MiInfoRequest* Arena::CreateMaybeMessage< ::chat::MiInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::chat::MiInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::BroadcastRequest* Arena::CreateMaybeMessage< ::chat::BroadcastRequest >(Arena* arena) {
  return Arena::CreateInternal< ::chat::BroadcastRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::BroadcastResponse* Arena::CreateMaybeMessage< ::chat::BroadcastResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chat::BroadcastResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::CambioEstadoRequest* Arena::CreateMaybeMessage< ::chat::CambioEstadoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::chat::CambioEstadoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::UsuarioConectado* Arena::CreateMaybeMessage< ::chat::UsuarioConectado >(Arena* arena) {
  return Arena::CreateInternal< ::chat::UsuarioConectado >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::UsuariosConectadosResponse* Arena::CreateMaybeMessage< ::chat::UsuariosConectadosResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chat::UsuariosConectadosResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::SolicitarInfoUsuarioRequest* Arena::CreateMaybeMessage< ::chat::SolicitarInfoUsuarioRequest >(Arena* arena) {
  return Arena::CreateInternal< ::chat::SolicitarInfoUsuarioRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::SolicitarInfoUsuarioResponse* Arena::CreateMaybeMessage< ::chat::SolicitarInfoUsuarioResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chat::SolicitarInfoUsuarioResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::MensajePrivadoRequest* Arena::CreateMaybeMessage< ::chat::MensajePrivadoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::chat::MensajePrivadoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::MensajePrivadoResponse* Arena::CreateMaybeMessage< ::chat::MensajePrivadoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chat::MensajePrivadoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ErrorResponse* Arena::CreateMaybeMessage< ::chat::ErrorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chat::ErrorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::Mensaje* Arena::CreateMaybeMessage< ::chat::Mensaje >(Arena* arena) {
  return Arena::CreateInternal< ::chat::Mensaje >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
